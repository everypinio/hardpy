{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HardPy","text":"<p> HardPy is a python library for creating a test bench for devices. </p>"},{"location":"#overview","title":"Overview","text":"<p>HardPy allows you to:</p> <ul> <li>Create test benches for devices using pytest;</li> <li>Use a browser to view, start, stop, and interact with tests;</li> <li>Store test results in the CouchDB database.</li> </ul>"},{"location":"#to-install","title":"To Install","text":"<pre><code>pip install hardpy\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Create your first test bench.</li> </ol> <pre><code>hardpy init\n</code></pre> <ol> <li>Launch CouchDB database via docker compose in the background.</li> </ol> <pre><code>cd tests\ndocker compose up -d\n</code></pre> <ol> <li>Launch HardPy operator panel.</li> </ol> <pre><code>hardpy run\n</code></pre> <ol> <li> <p>View operator panel in browser: http://localhost:8000/ </p> </li> <li> <p>View the latest test report: http://localhost:5984/_utils</p> <p>Login and password: dev, database - runstore , document - current.</p> </li> </ol>"},{"location":"changelog/","title":"Changelog","text":"<p>Versions follow Semantic Versioning: <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code>.</p>"},{"location":"changelog/#hardpy-0140","title":"HardPy 0.14.0","text":"<ul> <li>Add status display in words depending on the testing status.   [PR-165]</li> <li>Add a timeout to the <code>load</code> function of the <code>StandCloudLoader</code> class.   [PR-166]</li> <li>Fix logic for processing spacebar pressing.   [PR-164]</li> <li>Fix the display of the module duration after the operator panel has been restarted.   [PR-163]</li> <li>Add the display of last test run duration.   [PR-163]</li> <li>Add the option to translate the HardPy operator panel using ISO 639 language codes.   [PR-159]</li> </ul>"},{"location":"changelog/#hardpy-0130","title":"HardPy 0.13.0","text":"<ul> <li>Change CI settings, add testing of tests on different versions of packages.   [PR-157]</li> <li>Add an alert to operator panel when the following are called not from tests:   <code>set_message</code>, <code>set_case_artifact</code>, <code>set_module_artifact</code>, <code>run_dialog_box</code>,   and <code>get_current_attempt</code>.   [PR-154]</li> <li>Update the status of the test case and module when the test stops.   Only one case and one module receive the \"stopped\" status, while the rest are marked as \"skipped.\"   [PR-154]</li> <li>Change StandCloud authorization process to OAuth2 Device Flow by   RFC8628.   [PR-152]</li> </ul>"},{"location":"changelog/#hardpy-0121","title":"HardPy 0.12.1","text":"<ul> <li>Fix the situation in which the module and case stop times stop updating when the user stops the tests.   [PR-149]</li> </ul>"},{"location":"changelog/#hardpy-0120","title":"HardPy 0.12.0","text":"<ul> <li>Update <code>test_run</code> StandCloudReader function.   The <code>test_run</code> function provides access to 2 endpoints: <code>/test_run/{test_run_id}</code> and <code>/test_run</code>.   [PR-145]</li> <li>Update database scheme description.   [PR-140]</li> <li>Add test stand number by using <code>set_stand_number</code> function.   [PR-140]</li> <li>Add prohibition to run tests on the port if the port is busy.   [PR-136]</li> <li>Add marker critical.   [PR-135],   [PR-142],   [PR-143]</li> <li>Change dependency behaviour when a case or module name does not exist.   Such a test or module will be executed.   [PR-130]</li> <li>Add the ability to add dependency from multiple tests.   [PR-130]</li> <li>Transfer frontend from CRA to Vite.   [PR-122]</li> <li>Remove bug with scrolling tests with operator messages.   [PR-122]</li> <li>Logging to pytest.ini is no longer configured during HardPy project initialization by <code>hardpy init</code>.   [PR-122]</li> </ul>"},{"location":"changelog/#hardpy-0112","title":"HardPy 0.11.2","text":"<ul> <li>Fix StandCloud login support in version 3.12+.   [PR-134]</li> </ul>"},{"location":"changelog/#hardpy-0111","title":"HardPy 0.11.1","text":"<ul> <li>Change StandCloud URL for publish test report to <code>/test_report</code>.   [PR-131]</li> <li>Add <code>StandCloudReader</code> class for reading data from StandCloud.   [PR-131]</li> <li>Fix the behavior with empty module start time with skipped test.   [PR-131]</li> <li>Fix the behavior with empty module stop time with skipped test.   [PR-129]</li> <li>Add Stand info to Operator panel.   [PR-127]</li> <li>Add the <code>tests_name</code> field to hardpy.toml.   The <code>tests_name</code> allows to name the test suite in the operator panel.   [PR-126]</li> <li>Add CLI commands: <code>hardpy start</code>, <code>hardpy stop</code> and <code>hardpy status</code>.   [PR-126]</li> <li>Change the StandCloud API address to <code>/hardpy/api</code>.   [PR-125]</li> </ul>"},{"location":"changelog/#hardpy-0110","title":"HardPy 0.11.0","text":"<ul> <li>Remove the internal HardPy socket on port 6525. Pytest plugin arguments <code>--hardpy-sh</code> and <code>--hardpy-sp</code>   are left for backward compatibility with version below 0.10.1.   [PR-114]</li> <li>Add the ability to add HTML pages using <code>HTMLComponent</code> to dialog boxes and operator messages.   [PR-104]</li> </ul>"},{"location":"changelog/#hardpy-0101","title":"HardPy 0.10.1","text":"<ul> <li>Fix StandCloud authorization process in Windows.   [PR-110]</li> </ul>"},{"location":"changelog/#hardpy-0100","title":"HardPy 0.10.0","text":"<ul> <li>Add the <code>[stand_cloud]</code> section to the hardpy.toml configuration file.   [PR-85]</li> <li>Add the <code>StandCloudLoader</code> class to append the test result to the StandCloud.   [PR-85]</li> <li>Add support for StandCloud login and logout with <code>sc-login</code> and <code>sc-logout</code> commands.   [PR-85]</li> <li>Add alert field in statestore database.   [PR-85]</li> <li>Add alert to control panel by calling <code>set_alert</code> method in <code>HardpyPlugin</code>.   [PR-85]</li> </ul>"},{"location":"changelog/#hardpy-090","title":"HardPy 0.9.0","text":"<ul> <li>Add the ability to add images to operator messages like a dialog box.   [PR-95]</li> <li>Add non-blocking mode for operator message.   [PR-95]</li> <li>Add <code>clear_operator_message</code> function for closing operator message.   [PR-95]</li> <li>Add font_size parameter for operator message and dialog box text.   [PR-97]</li> <li>Add a 1 second pause between attempts in the <code>attempt</code> marker.   [PR-98]</li> <li>Fix an issue where operator messages and dialog boxes sometimes did not   open before the browser page reloaded.   [PR-98]</li> </ul>"},{"location":"changelog/#hardpy-080","title":"HardPy 0.8.0","text":"<ul> <li>Modify API for dialog boxes with images.   [PR-84]</li> <li>Add the ability to add images to all widgets.   [PR-84]</li> <li>Add ability to add borders to images.   [PR-84]</li> <li>Fix timezone format using the tzlocal package.   [PR-79]</li> <li>Add ability to close <code>set_operator_message</code> with <code>Escape</code> button.   [PR-84]</li> <li>Fix skipped test case and module status. Now skipped test status is skipped, not ready.   [PR-77]</li> <li>Add an exception when entering the same selection items or step names in dialog boxes.   [PR-86]</li> <li>Add the ability to clear the runstore database before running hardpy   using the the <code>--hardpy-clear-database</code> option of the pytest-hardpy plugin.   [PR-83]</li> </ul>"},{"location":"changelog/#hardpy-070","title":"HardPy 0.7.0","text":"<ul> <li>Add an attempt marker to indicate the number of attempts to run a test before it passes successfully.   [PR-65]</li> <li>Add a get_current_attempt method to get the current attempt number.   [PR-65]</li> <li>Add the ability to run multiple dialog boxes in a single test.   [PR-65]</li> <li>Fix the problem of freezing the dialog box in some test cases.   [PR-65]</li> <li>Add autofocus on dialog boxes (on the Confirm button or the first item in the list).   [PR-65]</li> <li>Remove the progress field from the runstore database.   [PR-66]</li> <li>Add the hw_id variable to the test_stand field in the database obtained from the stand computer.   [PR-67]</li> <li>Add the location variables to the test_stand field in the database.   [PR-66]</li> <li>Move the timezone and driver database variables to the test_stand field.   [PR-66]</li> <li>Add a schema version. The schema version is fixed to version 1.   [PR-66]</li> <li>Change timezone from two strings to one string.   [PR-69]</li> <li>Replace the Flake8 linter with a Ruff linter.   [PR-58]</li> </ul>"},{"location":"changelog/#hardpy-061","title":"HardPy 0.6.1","text":"<ul> <li>Fix running tests with a simple <code>pytest</code> command.   [PR-60]</li> </ul>"},{"location":"changelog/#hardpy-060","title":"HardPy 0.6.0","text":"<p>In HardPy, the startup principle has changed compared to version 0.5.0 and lower. The <code>hardpy-panel</code> command is no longer available.</p> <p>The HardPy project of version 0.6.0 or later must contain the file hardpy.toml.</p> <ul> <li>Add the ability to clear the statestore database before running hardpy   using the the <code>--hardpy-clear-database</code> option of the pytest-hardpy plugin.   [PR-49]</li> <li>Add the name and info fields to test_stand in the database schema.   [PR-49]</li> <li>Add the part_number field to dut in the database schema.   [PR-49]</li> <li>Add the attempt field to the test case in the database schema.   [PR-54]</li> <li>Add <code>set_stand_name</code> and <code>set_dut_part_number</code> functions.   [PR-49]</li> <li>Add a hardpy template project using the <code>hardpy init</code> command.   [PR-44]</li> <li>Add a hardpy config .toml file - hardpy.toml.   [PR-44]</li> <li>Refactor pytest-hardpy plugin options.   [PR-44]</li> <li>Add CLI to hardpy as an entry point. The <code>hardpy-panel</code> command is no longer available.   [PR-44]</li> <li>Fix use of special characters in dialog boxes. ASCII symbols are passed from frontend to backend.   [PR-40]</li> <li>Fix status of stopped tests.   [PR-45]</li> <li>Fix progress bar for skipped tests. Progress bar fills to the end when tests are skipped.   [PR-43]</li> <li>Add report name generation when serial number is missing.   [PR-47]</li> </ul>"},{"location":"changelog/#hardpy-051","title":"HardPy 0.5.1","text":"<ul> <li>Add the ability to work with cloud couchdb via couchdb config.   [PR-51]</li> </ul>"},{"location":"changelog/#hardpy-050","title":"HardPy 0.5.0","text":"<ul> <li>Refactor dialog box API.   [PR-33]</li> <li>Add conda.yaml example.   [PR-32]</li> <li>Add .vscode folder.   [PR-32]</li> <li>Fix catching exceptions and displaying them in the operator panel.   [PR-32]</li> <li>Add dialog box with radiobutton, checkbox, image, multiple steps.   [PR-29]   [PR-31]   [PR-31]</li> </ul>"},{"location":"changelog/#hardpy-040","title":"HardPy 0.4.0","text":"<ul> <li>Add base dialog box, text input and numeric input.   [PR-24]</li> <li>Add dialog box invocation functionality.   [PR-25]</li> <li>Add a socket mechanism to transfer data from the uvicorn server to the pytest subprocess.   [PR-25]</li> </ul>"},{"location":"changelog/#hardpy-030","title":"HardPy 0.3.0","text":"<ul> <li>Add implementation of test dependencies without using third-party plugins.   [PR-15]</li> <li>Reduce the number of database calls.   [PR-12]</li> <li>Speed up test collection.   [PR-12]</li> </ul>"},{"location":"changelog/#hardpy-020","title":"HardPy 0.2.0","text":"<ul> <li>Add documentation page.   [PR-5]</li> <li>Remove the ability to access the <code>HardPyPlugin</code>.   Users can now only register via the ini file.   [PR-6]</li> </ul>"},{"location":"changelog/#hardpy-010","title":"HardPy 0.1.0","text":"<ul> <li>Add pytest-hardpy and hardpy panel to the package.   [PR-1]</li> <li>Add frontend data synchronization via CouchDB data replication to PouchDB.   [PR-1]</li> <li>Add documentation.   [PR-1]</li> <li>CouchDB is the main database.   [PR-1]</li> </ul>"},{"location":"about/development/","title":"Development","text":""},{"location":"about/development/#environment","title":"Environment","text":""},{"location":"about/development/#requirements","title":"Requirements","text":"<ul> <li>python version must be equal to or greater than  3.10;</li> <li>yarn version must be equal to 4.0.1;</li> <li>node.js version must be equal to or greater than 16.10.0;</li> <li>CouchDB version must be equal to or greater than 3.2.0;</li> </ul>"},{"location":"about/development/#conda","title":"Conda","text":"<p>Create a conda.yaml file if you prefer to work through Anaconda or Miniconda:</p> <pre><code>name: hardpy\nchannels:\n  - defaults\n  - conda-forge\ndependencies:\n  - python=3.10\n  - pip&gt;=22\n  - nodejs=20\n  - yarn=4.0.1\n  - pip:\n      - -r requirements.txt\n      - -r requirements-doc.txt\n</code></pre> <p>create environment:</p> <pre><code>conda env create -f conda.yaml\n</code></pre> <p>Activate:</p> <pre><code>conda activate hardpy\n</code></pre>"},{"location":"about/development/#venv","title":"venv","text":"<p>If you prefer to work through venv:</p> <pre><code>python -m venv venv\n</code></pre> <p>Activate:</p> <pre><code>source venv/bin/activate\n</code></pre> <p>Install dependencies:</p> <pre><code>pip install -r requirements.txt\npip install -r requirements-doc.txt\n</code></pre>"},{"location":"about/development/#frontend","title":"Frontend","text":""},{"location":"about/development/#overview","title":"Overview","text":"<p>The frontend of the project can be developed, debugged, and built using Visual Studio Code (VSCode) or command-line tools. Below are the steps to run, debug, and build the frontend application.</p> <p>node.js and yarn are required to build the frontend.</p>"},{"location":"about/development/#1-running-the-frontend-for-hardpy-debugging","title":"1. Running the frontend for Hardpy debugging","text":"<p>To run the frontend application for debugging purposes, you can use the Run Frontend configuration in VSCode or execute commands manually.</p>"},{"location":"about/development/#using-vscode","title":"Using VSCode","text":"<ol> <li>Open the \"Run and Debug\" in VSCode.</li> <li>Select the Run Frontend configuration.</li> <li>Click the \"Run\" button (or press <code>F5</code>).</li> </ol> <p>This will:</p> <ul> <li>Launch <code>yarn</code>.</li> <li>Start the frontend application in development mode with debugging enabled.</li> </ul>"},{"location":"about/development/#manually","title":"Manually","text":"<p>Navigate to the frontend directory and run the following commands:</p> <pre><code>npm install &amp;&amp; npm run dev\n</code></pre> <p>You can specify your own port by adding it as an environment variable:</p> <pre><code>PORT=4000\n</code></pre> <p>By default, the frontend opens on port 3000 at the address http://localhost:3000/.</p>"},{"location":"about/development/#2-debugging-the-frontend","title":"2. Debugging the frontend","text":"<p>To debug the frontend application in the Chrome browser, use the Debug Frontend configuration in VSCode.</p>"},{"location":"about/development/#using-vscode_1","title":"Using VSCode","text":"<ol> <li>Ensure the frontend is running (use the Run Frontend configuration or manually start it).</li> <li>Open the \"Run and Debug\" in VSCode.</li> <li>Select the Debug Frontend configuration.</li> <li>Click the \"Run\" button (or press <code>F5</code>).</li> </ol> <p>This will:</p> <ul> <li>Launch Chrome and attach the debugger to the running frontend application at <code>http://localhost:3000</code>.</li> <li>Enable source maps for easier debugging.</li> </ul>"},{"location":"about/development/#manually_1","title":"Manually","text":"<ol> <li>Start the frontend application (as described in the Run Frontend section).</li> <li>Open Chrome and navigate to <code>http://localhost:3000</code>.</li> <li>Use Chrome DevTools (<code>F12</code>) to debug the application.</li> </ol>"},{"location":"about/development/#3-building-the-frontend-for-hardpy-package","title":"3. Building the frontend for Hardpy package","text":"<p>To build the frontend and include it in the Hardpy package, you can use the provided scripts or run the commands manually.</p> <p>Use the <code>compile_front.sh</code> script from <code>scripts</code> folder or run the scripts manually:</p> <pre><code>pip install -r requirements.txt\npython -m build\n</code></pre> <p>For frontend rebuilding use the <code>recompile_front.sh</code> from <code>scripts</code> folder or run the scripts manually:</p> <pre><code>pip uninstall $PRJ -y\n\nrm -rf hardpy/hardpy_panel/frontend/dist\nrm -rf hardpy/hardpy_panel/frontend/node_modules\nrm -rf *.egg-info\nrm -rf dist\nrm -rf __pycache__\n\npip install -r requirements.txt\npython -m build\n</code></pre>"},{"location":"about/development/#4-setting-the-debug_frontend-variable","title":"4. Setting the <code>DEBUG_FRONTEND</code> variable","text":"<p>To enable debugging for the frontend application, you must set the <code>DEBUG_FRONTEND</code> environment variable. Without this variable, the frontend will not run in debug mode, and the Run Frontend and Debug Frontend configurations will not work as expected.</p>"},{"location":"about/development/#option-1-setting-debug_frontend-in-vscode-configuration","title":"Option 1: setting <code>DEBUG_FRONTEND</code> in VSCode configuration","text":"<p>You can specify the <code>DEBUG_FRONTEND</code> variable directly in the VSCode launch configuration. Here's an example of how to include it in a test configuration:</p> <pre><code>{\n    \"name\": \"Python: Example Dialog box\",\n    \"type\": \"debugpy\",\n    \"request\": \"launch\",\n    \"module\": \"hardpy.cli.cli\",\n    \"console\": \"integratedTerminal\",\n    \"env\": {\n        \"DEBUG_FRONTEND\": \"1\"\n    },\n    \"args\": [\n        \"run\",\n        \"examples/dialog_box\"\n    ]\n}\n</code></pre> <p>This configuration ensures that the frontend runs in debug mode when the test is executed.</p>"},{"location":"about/development/#option-2-setting-debug_frontend-in-env-file","title":"Option 2: setting <code>DEBUG_FRONTEND</code> in <code>.env</code> file","text":"<p>Alternatively, you can define the <code>DEBUG_FRONTEND</code> variable in a <code>.env</code> file located in the root of your project. </p> <ol> <li>Create a <code>.env</code> file in the root directory of your project (if it doesn't already exist).</li> <li>Add the following line to the <code>.env</code> file:</li> </ol> <pre><code>DEBUG_FRONTEND=1\n</code></pre> <ol> <li>Ensure your VSCode or runtime environment loads the <code>.env</code> file. Many tools and frameworks (e.g., <code>python-dotenv</code>) automatically load variables from <code>.env</code>.</li> </ol>"},{"location":"about/development/#adding-translations","title":"Adding Translations","text":"<p>To add or modify translations for the HardPy operator panel:</p> <ol> <li> <p>Navigate to the translations directory:    <pre><code>cd hardpy/hardpy_panel/frontend/public/locales/\n</code></pre></p> </li> <li> <p>Create a new folder for your language using its ISO 639 code (e.g., <code>en</code> for English, <code>ru</code> for Russian, <code>fr</code> for French).</p> </li> <li> <p>Inside the language folder, create a <code>translation.json</code> file with the following structure:    <pre><code>{\n  \"app\": {\n    \"title\": \"HardPy Operator Panel\",\n    \"lastLaunch\": \"Last launch:\",\n   \"duration\": \"Duration\",\n   \"seconds\": \"s\",\n    \"soundOn\": \"Turn on the sound\",\n    \"soundOff\": \"Turn off the sound\",\n    \"debugOn\": \"Turn on the debug mode\",\n    \"debugOff\": \"Turn off the debug mode\",\n    \"connection\": \"Establishing a connection... \ud83e\uddd0\ud83d\udd0e\",\n    \"dbError\": \"Database connection error. \ud83d\ude45\ud83c\udffd\u200d\u2640\ufe0f\ud83d\udeab\",\n    \"noEntries\": \"No entries in the database \ud83d\ude45\ud83c\udffd\u200d\u2640\ufe0f\ud83d\udeab\",\n    \"status\": {\n      \"ready\": \"ready\",\n      \"run\": \"run\",\n      \"passed\": \"pass\",\n      \"failed\": \"fail\",\n      \"stopped\": \"stopped\",\n      \"unknown\": \"unknown\"\n    }\n  },\n  \"button\": {\n    \"start\": \"Start\",\n    \"stop\": \"Stop\",\n    \"confirm\": \"Confirm\"\n  },\n  \"error\": {\n    \"dbConnectionTitle\": \"Database Connection Error\",\n    \"dbConnectionMessage\": \"Failed to establish connection with the database\"\n  },\n  \"operatorDialog\": {\n    \"defaultTitle\": \"Message\",\n    \"imageAlt\": \"Operator message image\",\n    \"htmlCodeTitle\": \"HTML Code\",\n    \"htmlLinkTitle\": \"HTML Link\",\n    \"enterAnswer\": \"Enter answer\",\n    \"fieldNotEmpty\": \"The field must not be empty\",\n    \"notificationTitle\": \"Notification\",\n    \"notificationDesc\": \"The window was closed. Tests stopped.\",\n    \"numericInputError\": \"Please enter a number\",\n    \"radioButtonError\": \"Please select one option\",\n    \"checkboxError\": \"Please select at least one option\"\n  },\n  \"suiteList\": {\n    \"loadingTests\": \"Loading tests... \ud83e\udd14\",\n    \"refreshHint\": \"Try refreshing the page.\",\n    \"standName\": \"Stand name\",\n    \"status\": \"Status\",\n    \"startTime\": \"Start time\",\n    \"finishTime\": \"Finish time\",\n    \"alert\": \"Alert\"\n  },\n  \"testSuite\": {\n    \"nameColumn\": \"Name\",\n    \"dataColumn\": \"Data\",\n    \"loading\": \"Loading...\",\n    \"stubName\": \"Test Suite\"\n  }\n}\n</code></pre></p> </li> <li> <p>Translate all values while keeping the same JSON structure and keys.</p> </li> </ol> <p>Note: Always use valid ISO 639 language codes for folder names.</p>"},{"location":"about/development/#launch","title":"Launch","text":"<ol> <li>Install dependencies or create environment.</li> <li>Compile frontend if it's the first launch.</li> <li>Launch <code>hardpy init</code> with path to tests folder.</li> <li>Launch CouchDB instance.</li> <li>Launch <code>hardpy run</code> with path to tests folder.</li> </ol> <p>Addresses:</p> <ul> <li>HardPy panel: http://localhost:8000/</li> <li>CouchDB: http://localhost:5984/_utils/</li> </ul>"},{"location":"about/development/#documentation","title":"Documentation","text":""},{"location":"about/development/#server","title":"Server","text":"<p>Documentation server command is:</p> <pre><code>mkdocs serve\n</code></pre> <p>Documentation address: http://localhost:8000/</p>"},{"location":"about/development/#build","title":"Build","text":"<p>Documentation building command is:</p> <pre><code>mkdocs build\n</code></pre> <p>The result is in the folder <code>public</code>.</p>"},{"location":"about/fronted_sync/","title":"Frontend data synchronization","text":"<p>Data synchronization uses the replication mechanism of CouchDB and PouchDB.</p> <ul> <li>The statestore database contains the document current, which is a JSON object that stores the current state of the test run without artifacts. The plugin updates the document as testing progresses using the StateStore class.</li> <li>The runstore database contains the document current, which is a JSON object that stores the current state of the test run with artifacts - a report on the current test run.</li> </ul>"},{"location":"about/fronted_sync/#statestore-scheme","title":"Statestore scheme","text":"<p>The runstore database is similar to statestore database, but there are differences:</p> <ul> <li>runstore contains the artifact field for test run, module, and case.</li> <li>runstore does not contain some fields: progress, dialog_box, attempt,   alert, operator_data, operator_msg.</li> </ul> <p>The current document of the statestore database contains some section.</p>"},{"location":"about/fronted_sync/#main","title":"main","text":"<ul> <li>_rev: a CouchDB revision MVCC token;   The variable is assigned automatically.</li> <li>_id: unique document identifier.   The variable is assigned automatically.</li> <li>progress: test run progress.   The variable is assigned automatically.</li> <li>stop_time: the end time of the test in Unix seconds. The variable is assigned automatically.</li> <li>start_time: the start time of the test in Unix seconds. The variable is assigned automatically.</li> <li>status: test execution status from pytest: passed, failed, skipped, stopped.   The variable is assigned automatically.</li> <li>name: the name of the test suite. It is displayed in the header of the operator panel.   The user can specify the name using the <code>tests_name</code> variable in the hardpy.toml file.   If this variable is not set, the name will be taken from the directory name containing the tests.</li> <li>dut: DUT information. See the dut section for more information.</li> <li>test_stand: test stand information. See the test_stand section for more information.</li> <li>modules: module (pytest files) information. See the modules section for more information.</li> <li>alert: operator panel alert information.   Alert information is displayed at the top of the operator panel.   The variable is assigned automatically.</li> <li>operator_data operator panel data for operator message.   This is filled in when the set_operator_message function is called.</li> <li>operator_msg: text of an operator message.   This is filled in when the set_operator_message or   clear_operator_message functions is called.</li> </ul>"},{"location":"about/fronted_sync/#test_stand","title":"test_stand","text":"<p>The test_stand section contains information about the test stand. It is a computer on which HardPy is running and to which the DUT test equipment is connected.</p> <ul> <li>name - test stand name. It can only be set once per test run.   The user can specify the stand name by using set_stand_name function.</li> <li>drivers: information about drivers in the form of a dictionary, including test equipment and test equipment software.   The user can specify the driver info by using set_driver_info function.</li> <li>info: dictionary containing additional information about the test stand.   The user can specify the additional info by using set_stand_info function.</li> <li>timezone: timezone of test stand as a string. The variable is assigned automatically.</li> <li>location: the location of the test stand, e.g., the country, city, or laboratory number.   It can only be set once per test run. The user can specify the location by using   set_stand_location function.</li> <li>number: test stand number. Some stands may have the same name and   run on the same computer but have different numbers. It can only be set once per test run.   The user can specify the stand number by using set_stand_number function.</li> <li>hw_id: test stand machine id (GUID) or host name. The variable is assigned automatically by   the py-machineid package</li> </ul>"},{"location":"about/fronted_sync/#dut","title":"dut","text":"<p>The device under test section contains information about the DUT.</p> <ul> <li>serial_number: DUT serial number. This identifier is unique to the testing device or board.   It can only be set once per test run.   The user can specify the DUT serial number by using set_dut_serial_number function.</li> <li>part_number: DUT part number. This identifier of a particular part design, board or device.   It can only be set once per test run.   The user can specify the DUT part number by using set_dut_part_number function.</li> <li>info: dictionary containing additional information about the the DUT, such as batch, board revision, etc.   The user can specify the additional info by using set_dut_info function.</li> </ul>"},{"location":"about/fronted_sync/#operator_msg","title":"operator_msg","text":"<p>The operator_msg section contains operator message data. The user can open a operator message box by using the set_operator_message function. The user can close a operator message box by using the clear_operator_message function.</p> <ul> <li>msg: message for operator.</li> <li>title: the title of operator message dialog box.</li> <li>visible: should a message be displayed on the operator panel.</li> <li>id: operator message id.</li> <li>font_size: operator message font size.</li> <li>image: information about image.</li> <li>address: image address.</li> <li>width: image width in percent.</li> <li>border: image border in pixels.</li> <li>base64: image in base64 code.</li> <li>html: information about html.</li> <li>code_or_url: html code or link.</li> <li>is_raw_html: is html code is raw.</li> <li>width: html width in percent.</li> <li>border: html border in pixels.</li> </ul>"},{"location":"about/fronted_sync/#modules","title":"modules","text":"<p>The modules section contains the information about tests. Each module contains information from a single test file. The module's name is the same as the file's name.</p> <ul> <li>test_{module_name}: an object containing information about a specific module.   The <code>{module_name}</code> variable is assigned automatically.   Contains the following fields:</li> <li>status: module test execution status. The variable is assigned automatically.</li> <li>name: module name, by default the same as module_id.     The user can specify the module name by using module_name marker.</li> <li>start_time: start time of module testing in Unix seconds. The variable is assigned automatically.</li> <li>stop_time: end time of module testing in Unix seconds. The variable is assigned automatically.</li> <li>cases: an object that contains information about each test case within the module.<ul> <li>test_{case_name}: an object containing information about a specific case.   The <code>{case_name}</code> variable is assigned automatically.   Contains the following fields:</li> <li>status: test case execution status. The variable is assigned automatically.</li> <li>name: case name, by default the same as case_id.     The user can specify the case name by using case_name marker.</li> <li>start_time: start time of case testing in Unix seconds. The variable is assigned automatically.</li> <li>stop_time: end time of case testing in Unix seconds. The variable is assigned automatically.</li> <li>assertion_msg: assert or error message if the test case fails. The variable is assigned automatically.     However, the user can write their own message in case of an assertion, which will be written to this variable.     For example:     <pre><code>assert False, \"This is an example\"\n</code></pre>     The assertion_msg is displayed in the operator panel next to the test case in which it was called.</li> <li>msg: the log message is displayed in the operator panel next to the test case in which it was called.     The user can specify and update current message by using set_message function.</li> <li>attempt: number of attempts per successful test case.     The user can specify the case name by using attempt marker.</li> <li>dialog_box: information about dialog box.     The user can open a dialog box within a test case by using the run_dialog_box function.     Data from the dialog box is passed through the DialogBox class.<ul> <li>title_bar: title bar of the dialog box.</li> <li>dialog_text: text displayed in the dialog box.</li> <li>widget: information about the widget.</li> <li>info: widget additional information.</li> <li>type: type of the widget.</li> <li>image: information about image.</li> <li>address: image address.</li> <li>width: image width in percent.</li> <li>border: image border in pixels.</li> <li>base64: image in base64 code.</li> <li>html: information about html.</li> <li>code_or_url: html code or link.</li> <li>is_raw_html: is html code is raw.</li> <li>width: html width in percent.</li> <li>border: html border in pixels.</li> <li>visible: should a dialog box be displayed on the operator panel.</li> <li>id: dialog box id.</li> <li>font_size: dialog box font size.</li> </ul> </li> </ul> </li> </ul> <p>Example of a current document:</p> <pre><code>    {\n      \"_rev\": \"44867-3888ae85c19c428cc46685845953b483\",\n      \"_id\": \"current\",\n      \"progress\": 100,\n      \"stop_time\": 1695817266,\n      \"start_time\": 1695817263,\n      \"status\": \"failed\",\n      \"alert\": \"\",\n      \"operator_data\": {\n        \"dialog\": \"\"\n      },\n      \"name\": \"hardpy-stand\",\n      \"dut\": {\n        \"serial_number\": \"92c5a4bb-ecb0-42c5-89ac-e0caca0919fd\",\n        \"part_number\": \"part_1\",\n        \"info\": {\n          \"batch\": \"test_batch\",\n          \"board_rev\": \"rev_1\"\n        }\n      },\n      \"test_stand\": {\n        \"hw_id\": \"840982098ca2459a7b22cc608eff65d4\",\n        \"name\": \"test_stand_1\",\n        \"info\": {\n          \"geo\": \"Belgrade\"\n        },\n        \"timezone\": \"Europe/Belgrade\",\n        \"drivers\": {\n          \"driver_1\": \"driver info\",\n          \"driver_2\": {\n            \"state\": \"active\",\n            \"port\": 8000\n          }\n        },\n        \"location\": \"Belgrade_1\",\n        \"number\": 2\n      },\n      \"operator_msg\": {\n        \"msg\": \"Operator message\",\n        \"title\": \"Message\",\n        \"visible\": true,\n        \"id\": \"f45ac1e7-2ce8-4a6b-bb9d-8863e30bcc78\"\n      },\n      \"modules\": {\n        \"test_1_a\": {\n          \"status\": \"failed\",\n          \"name\": \"Module 1\",\n          \"start_time\": 1695816884,\n          \"stop_time\": 1695817265,\n          \"cases\": {\n            \"test_dut_info\": {\n              \"status\": \"passed\",\n              \"name\": \"DUT info \",\n              \"start_time\": 1695817263,\n              \"stop_time\": 1695817264,\n              \"assertion_msg\": null,\n              \"msg\": null,\n              \"attempt\": 1,\n              \"dialog_box\": {\n                \"title_bar\": \"Example of text input\",\n                \"dialog_text\": \"Type some text and press the Confirm button\",\n                \"widget\": {\n                  \"info\": {\n                    \"text\": \"some text\"\n                  },\n                  \"type\": \"textinput\"\n                },\n                \"image\": {\n                  \"address\": \"assets/test.png\",\n                  \"width\": 100,\n                  \"border\": 0,\n                },\n                \"html\": {\n                  \"code_or_url\": \"https://everypinio.github.io/hardpy/\",\n                  \"width\": 100,\n                  \"border\": 0,\n                  \"is_raw_html\": false\n                },\n                \"visible\": true,\n                \"id\": \"b57ab1e7-8cf8-4a6a-bb9d-8863ea0bcc78\"\n              }\n            },\n            \"test_minute_parity\": {\n              \"status\": \"failed\",\n              \"name\": \"Test 1\",\n              \"start_time\": 1695817264,\n              \"stop_time\": 1695817264,\n              \"assertion_msg\": \"The test failed because minute 21 is odd! Try again!\",\n              \"attempt\": 1,\n              \"msg\": [\n                \"Current minute 21\"\n              ]\n            }\n          }\n        }\n      }\n    }\n</code></pre>"},{"location":"documentation/","title":"Documentation","text":""},{"location":"documentation/#python-version","title":"Python version","text":"<p>HardPy is based on the python 3.10 and supports versions 3.11, 3.12, 3.13.</p>"},{"location":"documentation/#hardpy-structure","title":"HardPy structure","text":"<p>HardPy includes several parts.</p>"},{"location":"documentation/#hardpy-cli","title":"HardPy CLI","text":"<p>HardPy CLI on a structural scheme.</p> <ul> <li>Entry point for HardPy.</li> <li>HardPy test bench creator.</li> <li>Launcher for operator panel.</li> <li>StandCloud authorization tool.</li> </ul> <p>For more info, read CLI.</p>"},{"location":"documentation/#hardpy-pytest-plugin","title":"HardPy pytest plugin","text":"<p>HardPy includes the pytest-hardpy plugin for pytest. Compatible with pytest versions above 7. You can run tests not only through the operator panel but also through the pytest itself.</p> <p>pytest-hardpy on a structural scheme.</p> <ul> <li>The pytest wrapper for running pytest from the HardPy operator panel.</li> <li>The pytest plugin with API for storing data in a database.</li> </ul> <p>For more info, read pytest-hardpy.</p>"},{"location":"documentation/#hardpy-operator-panel","title":"HardPy operator panel","text":"<p>HardPy includes a React application - HardPy operator panel. It allows you to use a browser to view and interact with your tests and write test results to a database.</p> <p>hardpy-panel on a structural scheme.</p> <ul> <li>Web interface for viewing tests and starting/stopping tests.</li> <li>FastAPI application for processing frontend commands.</li> <li>PouchDB - web database for synchronizing data from CouchDB and the hardpy operator panel.</li> </ul> <p>For more info, read hardpy-panel.</p>"},{"location":"documentation/#couchdb","title":"CouchDB","text":"<p>HardPy uses CouchDB as its database but you can write final result to any database because CouchDB stores data in a simple document. Developers can create their adapter for any database and store the test report in a way that suits them. By default HardPy allows you to store all reports in CouchDB. HardPy is compatible with CouchDB versions above 3.2.</p> <ul> <li>Database to store current test data and store all test results.</li> </ul> <p>For more info, read database.</p>"},{"location":"documentation/#database-adapter","title":"Database adapter","text":"<ul> <li>HardPy allows you to use a simple database adapter to store test results in CouchDB   using the CouchdbLoader.</li> <li>HardPy allows you to use a StandCloud database adapter to store test results in StandCloud   using the StandCloudLoader.</li> <li>A developer can create a database adapter to store test results in any database.</li> </ul>"},{"location":"documentation/#structural-scheme","title":"Structural scheme","text":"HardPy structure"},{"location":"documentation/cli/","title":"Command line interface","text":"<p>HardPy uses the CLI (command line interface) as an entry point.</p> <p>For more information use:</p> <pre><code>hardpy --help\n</code></pre>"},{"location":"documentation/cli/#hardpy-init","title":"hardpy init","text":"<p>The <code>hardpy init</code> command is used to create a test bench. By default, it creates the <code>tests</code> directory.</p> <p>It consists of:</p> <ul> <li><code>test_1.py</code> - a pytest file with a simple test;</li> <li><code>conftest.py</code> - the pytest conftest file;</li> <li><code>pytest.ini</code> - pytest configuration .ini file for pytest;</li> <li><code>hardpy.toml</code> - HardPy configuration file;</li> <li><code>docker-compose.yaml</code> - docker-compose file for running the database;</li> <li><code>database</code> - CouchDB database directory;</li> <li><code>couchdb.ini</code> - the couchdb configuration .ini file in the database directory;</li> </ul> <p>You can run <code>hardpy init &lt;test_bench_name&gt;</code>, where <code>&lt;test_bench_name&gt;</code> is the name of your test bench.</p> <p>The <code>hardpy init</code> command allows you to change the initial HardPy settings. More info in hardpy config.</p> <pre><code> Usage: hardpy init [OPTIONS] [TESTS_DIR]\n\n Initialize HardPy tests directory.\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   tests_dir      [TESTS_DIR]  [default: None]                                                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --tests-name                                   TEXT     Specify a tests suite name.                        \u2502\n\u2502 --create-database      --no-create-database             Create CouchDB database.                           \u2502\n\u2502                                                         [default: create-database]                         \u2502\n\u2502 --database-user                                TEXT     Specify a database user. [default: dev]            \u2502\n\u2502 --database-password                            TEXT     Specify a database user password. [default: dev]   \u2502\n\u2502 --database-host                                TEXT     Specify a database host. [default: localhost]      \u2502\n\u2502 --database-port                                INTEGER  Specify a database port. [default: 5984]           \u2502\n\u2502 --frontend-port                                INTEGER  Specify a frontend port. [default: 8000]           \u2502\n\u2502 --frontend-host                                TEXT     Specify a frontend host. [default: localhost]      \u2502\n\u2502 --sc-address                                   TEXT     Specify a StandCloud address.                      \u2502\n\u2502 --sc-connection-only --no-sc-connection-only            Check StandCloud service availability before start.\u2502\n|                                                         [default: check-stand-cloud]                       \u2502\n\u2502 --help                                                  Show this message and exit.                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>To obtain this information, use:</p> <pre><code>hardpy init --help\n</code></pre>"},{"location":"documentation/cli/#hardpy-run","title":"hardpy run","text":"<p>The <code>hardpy run</code> command is used to start the operator panel server. By default, it starts HardPy in the current directory.</p> <p>You can run the <code>hardpy run &lt;tests_directory&gt;</code> command, where <code>&lt;tests_directory&gt;</code> is the path to the directory with your tests.</p> <pre><code> Usage: hardpy run [OPTIONS] [TESTS_DIR]\n\n Run HardPy server.\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   tests_dir      [TESTS_DIR]  [default: None]                                                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.                                                                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>To obtain this information, use:</p> <pre><code>hardpy run --help\n</code></pre>"},{"location":"documentation/cli/#hardpy-start","title":"hardpy start","text":"<p>The <code>hardpy start</code> command is used to launch HardPy tests while the HardPy opener panel is running. By default, it starts tests in the current directory.</p> <pre><code> Usage: hardpy start [OPTIONS] [TESTS_DIR]\n\n Start HardPy tests.\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   tests_dir      [TESTS_DIR]  [default: None]                                                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.                                                                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"documentation/cli/#hardpy-stop","title":"hardpy stop","text":"<p>The <code>hardpy stop</code> command is used to stop HardPy tests while the HardPy opener panel is running. By default, it stops tests in the current directory.</p> <pre><code> Usage: hardpy stop [OPTIONS] [TESTS_DIR]\n\n Stop HardPy tests.\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   tests_dir      [TESTS_DIR]  [default: None]                                                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.                                                                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"documentation/cli/#hardpy-status","title":"hardpy status","text":"<p>The <code>hardpy status</code> command is used to get HardPy tests launch status.</p> <pre><code> Usage: hardpy status [OPTIONS] [TESTS_DIR]\n\n Get HardPy test launch status.\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   tests_dir      [TESTS_DIR]  [default: None]                                                              \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.                                                                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"documentation/cli/#sc-login","title":"sc-login","text":"<p>The <code>hardpy sc-login</code> command is used to login in StandCloud.</p> <p>You can run the <code>hardpy sc-login &lt;stand_cloud_address&gt;</code> command, where <code>&lt;stand_cloud_address&gt;</code> is the StandCloud service address.</p> <pre><code> Usage: hardpy sc-login [OPTIONS] [TESTS_DIR]\n\n Login HardPy in StandCloud.\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   address   TEXT  [default: None] [required]                                                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --check         --no-check           Check StandCloud connection. [default: no-check]                      \u2502\n\u2502 --help                               Show this message and exit.                                           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>To obtain this information, use:</p> <pre><code>hardpy sc-login --help\n</code></pre>"},{"location":"documentation/cli/#sc-logout","title":"sc-logout","text":"<p>The <code>hardpy sc-logout</code> command is used to logout from StandCloud.</p> <pre><code> Usage: hardpy sc-logout [OPTIONS]\n\n Logout HardPy from StandCloud.\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502   address   TEXT  [default: None] [required]                                                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.                                                                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <pre><code>hardpy sc-logout --help\n</code></pre>"},{"location":"documentation/database/","title":"Database","text":""},{"location":"documentation/database/#about","title":"About","text":"<p>We use CouchDB because it's a simple document-oriented NoSQL database. The database has two main purposes:</p> <ul> <li>Saving test report;</li> <li>Data synchronization with the web interface.</li> </ul> <p>The CouchDB version must be equal to or greater than the 3.2 version.</p>"},{"location":"documentation/database/#database-in-pytest-hardpy","title":"Database in pytest-hardpy","text":""},{"location":"documentation/database/#description-of-databases","title":"Description of databases","text":"<p>The pytest plugin has 2 databases: statestore and runstore.</p> <ul> <li>The statestore database uses for frontend data synchronization.</li> <li>The runstore database contains the document current, which is a JSON object that stores the current state of the test run.</li> </ul> <p>A separate database is required to store the list of reports. The report database is used as an example of storing reports on past testing runs. It can be launched in the same instance as the statestore, runstore database, or in a different one. The database is accessed through the CouchdbLoader class, which can be called at the end of each launch. To read the current report, use the <code>get_current_report()</code> function.</p> <p>Sample code for saving a report at the end of testing:</p> <pre><code># conftest.py\ndef save_report_to_couchdb():\n    report = get_current_report()\n    if report:\n        loader = CouchdbLoader(CouchdbConfig())\n        loader.load(report)\n\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef fill_actions_after_test(post_run_functions: list):\n    post_run_functions.append(save_report_to_couchdb)\n    yield\n</code></pre> <p>HardPy users have the flexibility to choose their preferred database. They can write custom classes to record reports at the end of testing.</p>"},{"location":"documentation/database/#runstore-scheme","title":"Runstore scheme","text":"<p>The runstore and report databases have the same schema, as runstore stores the current report and report stores reports.</p> <p>The current document of runstore database contains some section.</p>"},{"location":"documentation/database/#main","title":"main","text":"<ul> <li>_rev: a CouchDB revision MVCC token;   The variable is assigned automatically.</li> <li>_id: unique document identifier.   The variable is assigned automatically.</li> <li>stop_time: the end time of the test in Unix seconds. The variable is assigned automatically.</li> <li>start_time: the start time of the test in Unix seconds. The variable is assigned automatically.</li> <li>status: test execution status from pytest: passed, failed, skipped, stopped.   The variable is assigned automatically.</li> <li>name: the name of the test suite. It is displayed in the header of the operator panel.   The user can specify the name using the <code>tests_name</code> variable in the hardpy.toml file.   If this variable is not set, the name will be taken from the directory name containing the tests.</li> <li>dut: DUT information. See the dut section for more information.</li> <li>test_stand: test stand information. See the test_stand section for more information.</li> <li>artifact: an object that contains information about the artifacts created during the test run.   The user can specify the run artifact by using set_run_artifact function.   The artifact contains a dictionary where the user can store any data at the test run level.   The artifacts are not displayed on the operator panel.</li> <li>modules: module (pytest files) information. See the modules section for more information.</li> </ul>"},{"location":"documentation/database/#test_stand","title":"test_stand","text":"<p>The test_stand section contains information about the test stand. It is a computer on which HardPy is running and to which the DUT test equipment is connected.</p> <ul> <li>name - test stand name. It can only be set once per test run.   The user can specify the stand name by using set_stand_name function.</li> <li>drivers: information about drivers in the form of a dictionary, including test equipment and test equipment software.   The user can specify the driver info by using set_driver_info function.</li> <li>info: dictionary containing additional information about the test stand.   The user can specify the additional info by using set_stand_info function.</li> <li>timezone: timezone of test stand as a string. The variable is assigned automatically.</li> <li>location: the location of the test stand, e.g., the country, city, or laboratory number.   It can only be set once per test run. The user can specify the location by using   set_stand_location function.</li> <li>number: test stand number. Some stands may have the same name and   run on the same computer but have different numbers. It can only be set once per test run.   The user can specify the stand number by using set_stand_number function.</li> <li>hw_id: test stand machine id (GUID) or host name. The variable is assigned automatically by   the py-machineid package.</li> </ul>"},{"location":"documentation/database/#test_stand-examples","title":"test_stand examples","text":"<p>Two stands on one computer:</p> <pre><code>// test stand 1\n\"test_stand\": {\n  \"hw_id\": \"840982098ca2459a7b22cc608eff65d4\",\n  \"name\": \"Test stand A\",\n  \"info\": {},\n  \"timezone\": \"Europe/Helsinki\",\n  \"drivers\": {\n    \"driver_1\": {\n      \"state\": \"active\",\n      \"port\": 3000\n    }\n  },\n  \"location\": \"Helsinki\",\n  \"number\": 1\n},\n</code></pre> <pre><code>// test stand 2\n\"test_stand\": {\n  \"hw_id\": \"840982098ca2459a7b22cc608eff65d4\",\n  \"name\": \"Test stand A\",\n  \"info\": {},\n  \"timezone\": \"Europe/Helsinki\",\n  \"drivers\": {\n    \"driver_1\": {\n      \"state\": \"active\",\n      \"port\": 3000\n    }\n  },\n  \"location\": \"Helsinki\",\n  \"number\": 2\n},\n</code></pre> <p>Two different stands:</p> <pre><code>// test stand 1\n\"test_stand\": {\n  \"hw_id\": \"840982098ca2459a7b22cc608eff65d4\",\n  \"name\": \"ABC\",\n  \"info\": {},\n  \"timezone\": \"Europe/Helsinki\",\n  \"drivers\": {\n    \"voltmeter\": {\n      \"sw_version\": \"1.1.3\",\n      \"hw_version\": \"2.0.1\"\n    }\n  },\n  \"location\": \"Laboratory 1\",\n  \"number\": null\n},\n</code></pre> <pre><code>// test stand 2\n\"test_stand\": {\n  \"hw_id\": \"156731093ab759a7b11ac108eaf69d2\",\n  \"name\": \"DEF\",\n  \"info\": {},\n  \"timezone\": \"Europe/Helsinki\",\n  \"drivers\": {},\n  \"location\": \"Laboratory 2\",\n  \"number\": null\n},\n</code></pre>"},{"location":"documentation/database/#dut","title":"dut","text":"<p>The device under test section contains information about the DUT.</p> <ul> <li>serial_number: DUT serial number. This identifier is unique to the testing device or board.   It can only be set once per test run.   The user can specify the DUT serial number by using set_dut_serial_number function.</li> <li>part_number: DUT part number. This identifier of a particular part design, board or device.   It can only be set once per test run.   The user can specify the DUT part number by using set_dut_part_number function.</li> <li>info: dictionary containing additional information about the the DUT, such as batch, board revision, etc.   The user can specify the additional info by using set_dut_info function.</li> </ul>"},{"location":"documentation/database/#dut-examples","title":"dut examples","text":"<p>Testing of two devices of the same type (same part number):</p> <pre><code>// dut 1\n\"dut\": {\n  \"serial_number\": \"1000-10\",\n  \"part_number\": \"ABC11\",\n  \"info\": {\n    \"board_rev\": \"rev_1\"\n  }\n}\n</code></pre> <pre><code>// dut 2\n\"dut\": {\n  \"serial_number\": \"1000-11\",\n  \"part_number\": \"ABC11\",\n  \"info\": {\n    \"board_rev\": \"rev_1\"\n  }\n}\n</code></pre>"},{"location":"documentation/database/#modules","title":"modules","text":"<p>The modules section contains the information about tests. Each module contains information from a single test file. The module's name is the same as the file's name.</p> <ul> <li>test_{module_name}: an object containing information about a specific module.   The <code>{module_name}</code> variable is assigned automatically.   Contains the following fields:</li> <li>status: module test execution status. The variable is assigned automatically.</li> <li>name: module name, by default the same as module_id.     The user can specify the module name by using module_name marker.</li> <li>start_time: start time of module testing in Unix seconds. The variable is assigned automatically.</li> <li>stop_time: end time of module testing in Unix seconds. The variable is assigned automatically.</li> <li>artifact: an object that contains information about the artifacts created during the test module.     The user can specify the module artifact by using set_module_artifact function.     The artifact contains a dictionary where the user can store any data at the test module level.     The artifacts are not displayed on the operator panel.</li> <li>cases: an object that contains information about each test case within the module.<ul> <li>test_{case_name}: an object containing information about a specific case.   The <code>{case_name}</code> variable is assigned automatically.   Contains the following fields:</li> <li>status: test case execution status. The variable is assigned automatically.</li> <li>name: case name, by default the same as case_id.     The user can specify the case name by using case_name marker.</li> <li>start_time: start time of case testing in Unix seconds. The variable is assigned automatically.</li> <li>stop_time: end time of case testing in Unix seconds. The variable is assigned automatically.</li> <li>assertion_msg: assert or error message if the test case fails. The variable is assigned automatically.     However, the user can write their own message in case of an assertion, which will be written to this variable.     For example:     <pre><code>assert False, \"This is an example\"\n</code></pre>     The assertion_msg is displayed in the operator panel next to the test case in which it was called.</li> <li>msg: the log message is displayed in the operator panel next to the test case in which it was called.     The user can specify and update current message by using set_message function.</li> <li>artifact: an object that contains information about the artifacts created during the test case.     The user can specify the case artifact by using set_case_artifact function.     The artifact contains a dictionary where the user can store any data at the test case level.     The artifacts are not displayed on the operator panel.</li> </ul> </li> </ul>"},{"location":"documentation/database/#report-example","title":"Report example","text":"<p>Example of a current document:</p> <pre><code>    {\n      \"_rev\": \"44867-3888ae85c19c428cc46685845953b483\",\n      \"_id\": \"current\",\n      \"stop_time\": 1695817266,\n      \"start_time\": 1695817263,\n      \"status\": \"failed\",\n      \"name\": \"hardpy-stand\",\n      \"dut\": {\n        \"serial_number\": \"92c5a4bb-ecb0-42c5-89ac-e0caca0919fd\",\n        \"part_number\": \"part_1\",\n        \"info\": {\n          \"batch\": \"test_batch\",\n          \"board_rev\": \"rev_1\"\n        }\n      },\n      \"test_stand\": {\n        \"hw_id\": \"840982098ca2459a7b22cc608eff65d4\",\n        \"name\": \"test_stand_1\",\n        \"info\": {\n          \"geo\": \"Belgrade\"\n        },\n        \"timezone\": \"Europe/Belgrade\",\n        \"drivers\": {\n          \"driver_1\": \"driver info\",\n          \"driver_2\": {\n            \"state\": \"active\",\n            \"port\": 8000\n          }\n        },\n        \"location\": \"Belgrade_1\",\n        \"number\": 2\n      },\n      \"artifact\": {},\n      \"modules\": {\n        \"test_1_a\": {\n          \"status\": \"failed\",\n          \"name\": \"Module 1\",\n          \"start_time\": 1695816884,\n          \"stop_time\": 1695817265,\n          \"artifact\": {},\n          \"cases\": {\n            \"test_dut_info\": {\n              \"status\": \"passed\",\n              \"name\": \"DUT info\",\n              \"start_time\": 1695817263,\n              \"stop_time\": 1695817264,\n              \"assertion_msg\": null,\n              \"msg\": null,\n              \"artifact\": {}\n            },\n            \"test_minute_parity\": {\n              \"status\": \"failed\",\n              \"name\": \"Test 1\",\n              \"start_time\": 1695817264,\n              \"stop_time\": 1695817264,\n              \"assertion_msg\": \"The test failed because minute 21 is odd! Try again!\",\n              \"msg\": [\n                \"Current minute 21\"\n              ],\n              \"artifact\": {\n                \"data_str\": \"123DATA\",\n                \"data_int\": 12345,\n                \"data_dict\": {\n                  \"test_key\": \"456DATA\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n</code></pre>"},{"location":"documentation/database/#couchdb-instance","title":"CouchDB instance","text":"<p>This section explains how to launch and manage a CouchDB instance. After launching the database, it becomes available at the following address:</p> <p>http://localhost:5984/_utils/</p> <p>The internal settings of the database are contained in the couchDB.ini configuration file. It contains settings that define the behavior and operating parameters of the database.</p>"},{"location":"documentation/database/#running-couchdb-with-docker-compose","title":"Running CouchDB with Docker Compose","text":"<p>An example configuration for running CouchDB via Docker Compose is located in the <code>example/database/couchdb</code> folder. A shortened version of the instructions is described below.</p> <ol> <li>Create a <code>docker</code> directory in the project's root directory.</li> <li>Create a <code>couchdb.ini</code> file in the <code>docker</code> directory.</li> </ol> <p><pre><code>[chttpd]\nenable_cors=true\n\n[cors]\norigins = *\nmethods = GET, PUT, POST, HEAD, DELETE\ncredentials = true\nheaders = accept, authorization, content-type, origin, referer, x-csrf-token\n</code></pre> 3. Create a <code>docker-compose.yaml</code> file in project's root directory.</p> <p><pre><code>version: \"3.8\"\n\nservices:\n  couchserver:\n    image: couchdb:3.4\n    ports:\n      - \"5984:5984\"\n    environment:\n      COUCHDB_USER: dev\n      COUCHDB_PASSWORD: dev\n    volumes:\n      - ./docker/dbdata:/opt/couchdb/data\n      - ./docker/couchdb.ini:/opt/couchdb/etc/local.ini\n</code></pre> 4. Run docker compose in the root directory.</p> <p><pre><code>docker compose up\n</code></pre> 5. To stop the database, run the command:</p> <pre><code>docker compose down\n</code></pre>"},{"location":"documentation/database/#running-couchdb-with-docker","title":"Running CouchDB with Docker","text":"<ol> <li>Create <code>couchdb.ini</code> file.</li> </ol> <p><pre><code>[chttpd]\nenable_cors=true\n\n[cors]\norigins = *\nmethods = GET, PUT, POST, HEAD, DELETE\ncredentials = true\nheaders = accept, authorization, content-type, origin, referer, x-csrf-token\n</code></pre> 2. The Docker version must be 24.0.0 or higher. Run the Docker container (from the folder with the couchdb.ini file):</p> <pre><code>docker run --rm --name couchdb -p 5984:5984 -e COUCHDB_USER=dev -e COUCHDB_PASSWORD=dev -v ./couchdb.ini:/opt/couchdb/etc/local.ini couchdb:3.4\n</code></pre> <p>Command for Windows:</p> <pre><code>docker run --rm --name couchdb -p 5984:5984 -e COUCHDB_USER=dev -e COUCHDB_PASSWORD=dev -v .\\couchdb.ini:/opt/couchdb/etc/local.ini couchdb:3.4\n</code></pre> <p>The container will be deleted after use.</p>"},{"location":"documentation/database/#running-couchdb-with-binary-packages-in-linux","title":"Running CouchDB with binary packages in Linux","text":"<ol> <li>Use this instruction to install CouchDB.</li> <li>The installer asks you if you want to install CouchDB as a standalone application or in a clustered configuration. Select <code>Standalone</code> and press Enter.</li> <li>You are prompted to enter the Erlang Node Name. You can ask it in Terminal with the command <code>hostname -f</code>.</li> <li>Set the Erlang Magic Cookie. This is a unique identifier, for example, <code>test1234</code>.</li> <li>Configure the network interfaces on which CouchDB will be bound <code>localhost</code> is fine.</li> <li>Enter an admin password of your choice for CouchDB, press <code>Enter</code>, re-type the password and press <code>Enter</code> again to continue the installation.</li> <li>After launching the database, it becomes available at the following address http://localhost:5984/_utils/. Open it.</li> <li>First of all, in the <code>User Management</code> section in the <code>Create Admins</code> tab, create a user with the login <code>dev</code> and password <code>dev</code>.</li> <li>In the <code>Config</code> choose <code>CORS</code> and appoint <code>Enable CORS</code> with <code>All domains</code>.</li> </ol>"},{"location":"documentation/database/#to-disable-the-couchdb-service","title":"To disable the CouchDB service:","text":"<p>Remove packages: <pre><code>sudo apt remove --purge couchdb\n</code></pre> Remove GPG keys and repository: <pre><code>sudo rm /usr/share/keyrings/couchdb-archive-keyring.gpg\nsudo rm /etc/apt/sources.list.d/couchdb.list\n</code></pre> Clean APT cache: <pre><code>sudo apt clean\n</code></pre> Disable service: <pre><code>systemctl stop couchdb.service\nsystemctl disable couchdb.service\nsystemctl daemon-reload\nsystemctl reset-failed\n</code></pre></p>"},{"location":"documentation/database/#running-couchdb-with-binary-packages-in-windows","title":"Running CouchDB with binary packages in Windows","text":"<ol> <li>Use this instruction to install CouchDB.</li> <li>Be sure to install CouchDB to a path with no spaces, such as <code>C:\\CouchDB</code>.</li> <li>Create a user with the login <code>dev</code> and password <code>dev</code> during the installation steps. Validate Credentials.</li> <li>Generate Random Cookie.</li> <li>After launching the database, it becomes available at the following address http://localhost:5984/_utils/. Open it.</li> <li>In the <code>Config</code> choose <code>CORS</code> and appoint <code>Enable CORS</code> with <code>All domains</code>.</li> </ol>"},{"location":"documentation/hardpy_config/","title":"HardPy config","text":"<p>HardPy uses the <code>hardpy.toml</code> file for configuration. The user can change the fields at creation by using hardpy init.</p> Note <p>All HardPy project must have <code>hardpy.toml</code> file.</p>"},{"location":"documentation/hardpy_config/#default-config","title":"Default config","text":"<pre><code>title = \"HardPy TOML config\"\ntests_dir = \"tests\"\n\n[database]\nuser = \"dev\"\npassword = \"dev\"\nhost = \"localhost\"\nport = 5984\n\n[frontend]\nhost = \"localhost\"\nport = 8000\n</code></pre>"},{"location":"documentation/hardpy_config/#maximum-configuration-file","title":"Maximum configuration file","text":"<pre><code>title = \"HardPy TOML config\"\ntests_dir = \"tests\"\ntests_name = \"My tests\"\n\n[database]\nuser = \"dev\"\npassword = \"dev\"\nhost = \"localhost\"\nport = 5984\n\n[frontend]\nhost = \"localhost\"\nport = 8000\nlanguage = \"en\"\n\n[stand_cloud]\naddress = \"demo.standcloud.io\"\nconnection_only = true\n</code></pre>"},{"location":"documentation/hardpy_config/#configuration-fields-description","title":"Configuration fields description","text":""},{"location":"documentation/hardpy_config/#common","title":"common","text":"<p>Common settings.</p>"},{"location":"documentation/hardpy_config/#title","title":"title","text":"<p>Configuration file header. The value is always <code>HardPy TOML config</code>.</p>"},{"location":"documentation/hardpy_config/#tests_dir","title":"tests_dir","text":"<p>Tests directory. The default is <code>tests</code>. The user can change this value with the <code>hardpy init</code> argument.</p>"},{"location":"documentation/hardpy_config/#tests_name","title":"tests_name","text":"<p>Tests name. The default is tests_dir. The user can change this value with the <code>hardpy init --tests-name</code> argument.</p>"},{"location":"documentation/hardpy_config/#database","title":"database","text":"<p>Database settings.</p>"},{"location":"documentation/hardpy_config/#user","title":"user","text":"<p>Database user name. The default is <code>dev</code>. The user can change this value with the <code>hardpy init --database-user</code> option.</p>"},{"location":"documentation/hardpy_config/#password","title":"password","text":"<p>Database password. The default is <code>dev</code>. The user can change this value with the <code>hardpy init --database-password</code> option.</p>"},{"location":"documentation/hardpy_config/#host","title":"host","text":"<p>Database host name. The default is <code>localhost</code>. The user can change this value with the <code>hardpy init --database-host</code> option.</p>"},{"location":"documentation/hardpy_config/#port","title":"port","text":"<p>Database port number. The default is <code>5984</code>. The user can change this value with the <code>hardpy init --database-port</code> option.</p>"},{"location":"documentation/hardpy_config/#frontend","title":"frontend","text":"<p>Frontend (operator panel) settings.</p>"},{"location":"documentation/hardpy_config/#host_1","title":"host","text":"<p>Operator panel host name. The default is <code>localhost</code>. The user can change this value with the <code>hardpy init --frontend-host</code> option.</p>"},{"location":"documentation/hardpy_config/#port_1","title":"port","text":"<p>Operator panel port number. The default is <code>8000</code>. The user can change this value with the <code>hardpy init --frontend-port</code> option.</p>"},{"location":"documentation/hardpy_config/#language","title":"language","text":"<p>Language of operator panel. The default is <code>en</code>. Available languages are there.</p>"},{"location":"documentation/hardpy_config/#stand_cloud","title":"stand_cloud","text":"<p>StandCloud settings.</p> <pre><code>[stand_cloud]\naddress = \"demo.standcloud.localhost\"\nconnection_only = true\n</code></pre>"},{"location":"documentation/hardpy_config/#address","title":"address","text":"<p>StandCloud service address. To obtain one, contact info@everypin.io.</p>"},{"location":"documentation/hardpy_config/#connection_only","title":"connection_only","text":"<p>Boolean variable, if set to <code>true</code>, HardPy will check the connection to the StandCloud service at each startup before running tests. The default value is <code>false</code>.</p> <p>If the connection fails, the tests will not run.</p>"},{"location":"documentation/hardpy_panel/","title":"HardPy panel","text":"<p>The hardpy panel or operator panel is a web interface that displays and controls the testing process in HardPy.</p>"},{"location":"documentation/hardpy_panel/#capability","title":"Capability","text":"<p>HardPy panel allows you to:</p> <ul> <li>Start and stop testing;</li> <li>Interact with dialog box during testing;</li> <li>Browse:<ul> <li>Test suite name.</li> <li>Last test run status.</li> <li>Test module name.</li> <li>Duration of test modules execution.</li> <li>Test module status.</li> <li>Test case name.</li> <li>Test case message.</li> <li>Test case status.</li> </ul> </li> <li>Browse current statestore state in debug mode.</li> </ul>"},{"location":"documentation/hardpy_panel/#languages","title":"Languages","text":"<p>You can set one of the following operator panel languages \u200b\u200bvia the configuration file:</p> <ul> <li>English (\"en\")</li> <li>German (\"de\")</li> <li>French (\"fr\")</li> <li>Spanish (\"es\")</li> <li>Chinese (\"zh\")</li> <li>Japanese (\"ja\")</li> <li>Russian (\"ru\")</li> </ul>"},{"location":"documentation/hardpy_panel/#usage","title":"Usage","text":""},{"location":"documentation/hardpy_panel/#launch-operator-panel","title":"Launch operator panel","text":"<p>Use the hardpy run command to start the web server. After this open page http://localhost:8000/ in the browser.</p> <p>When the operator panel is running, you can run tests through the web interface or through the pytest launcher (in a terminal or from another application).</p>"},{"location":"documentation/hardpy_panel/#start-and-stop-tests","title":"Start and stop tests","text":"<p>The operator panel contains a test start/stop button in the lower right corner of the screen. The user can start/stop tests using the space key.</p>"},{"location":"documentation/hardpy_panel/#operator-panel-bar","title":"Operator panel bar","text":"<p>Operator panel bar displays key system status information in a compact tag-based format.</p> <p>Fields:</p> <ul> <li>Stand name - name of the test stand;</li> <li>Status - current system status;</li> <li>Start time - test/operation start timestamp with timezone;</li> <li>Finish time - completion timestamp with timezone;</li> <li>Alert - active warning or error message;</li> <li>Test stand info - additional test stand parameters   from set_dut_info info;</li> </ul> <p>All fields appear as minimal tags and only display when data is available.</p>"},{"location":"documentation/hardpy_panel/#settings","title":"Settings","text":"<p>The operator panel contains a setting button in the top right corner.</p>"},{"location":"documentation/hardpy_panel/#debug-mode","title":"debug mode","text":"<p>The user can view the statestore database online by clicking on the Turn on the debug mode button.</p> <p>Debug mode is disabled by default.</p>"},{"location":"documentation/hardpy_panel/#sound","title":"sound","text":"<p>The user can turn on the sound of the end of the test by clicking on the Turn on the sound button.</p> <p>Sound is disabled by default.</p>"},{"location":"documentation/hardpy_panel/#dialog-box","title":"Dialog box","text":"<p>For user interaction with the test, it is possible to use dialog boxes. An example of usage can be seen in the example dialog box and in dialog box documentation. Currently, there are some types of dialog boxes.</p> <p>Each dialog box can contain an image.</p> <ul> <li>Allows the width to be changed using the <code>width</code> parameter.</li> <li>Allows changing the border thickness with the <code>border</code> parameter.</li> <li>Allow the following image types: gif, jpeg, pjpeg, png, svg+xml, tiff, vnd.microsoft.icon, vnd.wap.wbmp, webp.</li> </ul>"},{"location":"documentation/hardpy_panel/#basic-dialog-box","title":"basic dialog box","text":"<p>Contains an instruction or question and a <code>confirm</code> button for confirmation.</p> WidgetWidget with imageWidget with HTML with linkWidget with HTML with raw code <p> </p> <p> </p> <p> </p> <p> </p>"},{"location":"documentation/hardpy_panel/#text-input-field","title":"text input field","text":"<p>Contains an instruction or question, a text input field, and a <code>confirm</code> button for confirmation. The text is transmitted in UTF-8 encoding.</p> WidgetWidget with imageWidget with HTML <p> </p> <p> </p> <p> </p>"},{"location":"documentation/hardpy_panel/#number-input-field","title":"number input field","text":"<p>Contains an instruction or question, a number input field, and a <code>confirm</code> button for confirmation.</p> <ul> <li>Allows float numbers with a dot separator.</li> <li>Allows negative numbers.</li> <li>Allows numbers to be entered using E notation with <code>e</code>, e.g. <code>2e3</code>.</li> <li>The entered numbers will be converted to float.</li> </ul> WidgetWidget with imageWidget with html <p> </p> <p> </p> <p> </p>"},{"location":"documentation/hardpy_panel/#radiobutton","title":"radiobutton","text":"<p>Contains radiobutton widget.</p> <ul> <li>The user selects one option from several possible ones.</li> <li>Returns the contents of the selected item as a string.</li> </ul> WidgetWidget with imageWidget with html <p> </p> <p> </p> <p> </p>"},{"location":"documentation/hardpy_panel/#checkbox","title":"checkbox","text":"<p>Contains checkbox widget.</p> <ul> <li>The user selects several options from several possible ones.</li> <li>Returns a list with the contents of the selected items.</li> </ul> WidgetWidget with imageWidget with html <p> </p> <p> </p> <p> </p>"},{"location":"documentation/hardpy_panel/#multiple-steps","title":"multiple steps","text":"<p>Contains an instruction with multiple steps and <code>confirm</code> button for confirmation. Allows steps with text and image.</p> Step 1Step 2Step 3 <p> </p> <p> </p> <p> </p>"},{"location":"documentation/hardpy_panel/#operator-message","title":"Operator message","text":"<p>The messages to the operator are similar to dialog boxes, but do not contain a Confirm button and can be called outside the execution of the test plan, for example in case of exception catching in the <code>conftest.py</code> file. For more information, see the example operator message or in the function description set_operator_message.</p>"},{"location":"documentation/hardpy_panel/#warning-window","title":"warning window","text":"<p>If the user clicks <code>confirm</code> without entering anything, a warning window will be displayed.</p>"},{"location":"documentation/hardpy_panel/#error-notification","title":"error notification","text":"<p>If the user closes the dialog box (using the cross in the upper right corner), the tests will be stopped, an error message will be displayed.</p>"},{"location":"documentation/pytest_hardpy/","title":"pytest-hardpy","text":"<p>pytest-hardpy is a pytest plugin that helps you save test data in a database for test reporting and viewing test data in the web interface.</p>"},{"location":"documentation/pytest_hardpy/#plugin-registration","title":"Plugin registration","text":"<p>To use the pytest-hardpy you need to enable it. You can do this via the <code>pytest.ini</code> file.</p> <p>Example:</p> <pre><code># pytest.ini\n[pytest]\naddopts = --hardpy-pt\n</code></pre> <p>Another way to enable a plugin without <code>pytest.ini</code> file is to run tests with the option <code>--hardpy-pt</code>.</p> <pre><code>pytest --hardpy-pt tests\n</code></pre> <p>If tests are run via hardpy panel, then the pytest-hardpy plugin will be enabled for tests by default.</p>"},{"location":"documentation/pytest_hardpy/#functions","title":"Functions","text":""},{"location":"documentation/pytest_hardpy/#set_dut_info","title":"set_dut_info","text":"<p>This function records a dictionary containing information about the test stand. When called again, the information will be added to DB.</p> <p>Arguments:</p> <ul> <li><code>info</code> (dict): DUT info</li> </ul> <p>Example:</p> <pre><code>def test_dut_info():\n    set_dut_info({\"batch\": \"test_batch\", \"board_rev\": \"rev_1\"})\n</code></pre>"},{"location":"documentation/pytest_hardpy/#set_dut_serial_number","title":"set_dut_serial_number","text":"<p>Writes a string with a serial number. When called again, the exception <code>DuplicateSerialNumberError</code> will be caused.</p> <p>Arguments:</p> <ul> <li><code>serial_number</code> (str): DUT serial number</li> </ul> <p>Example:</p> <pre><code>def test_serial_number():\n    set_dut_serial_number(\"1234\")\n</code></pre>"},{"location":"documentation/pytest_hardpy/#set_dut_part_number","title":"set_dut_part_number","text":"<p>Writes a string with a part number. When called again, the exception <code>DuplicatePartNumberError</code> will be caused.</p> <p>Arguments:</p> <ul> <li><code>part_number</code> (str): DUT part number</li> </ul> <p>Example:</p> <pre><code>def test_part_number():\n    set_dut_part_number(\"part_1\")\n</code></pre>"},{"location":"documentation/pytest_hardpy/#set_stand_name","title":"set_stand_name","text":"<p>Writes a string with a test stand name. When called again, the exception <code>DuplicateTestStandNameError</code> will be caused.</p> <p>Arguments:</p> <ul> <li><code>name</code> (str): test stand name</li> </ul> <p>Example:</p> <pre><code>def test_stand_name():\n    set_stand_name(\"name 1\")\n</code></pre>"},{"location":"documentation/pytest_hardpy/#set_stand_info","title":"set_stand_info","text":"<p>Writes a dictionary with information about the test stand. When called again, the information will be added to DB.</p> <p>Arguments:</p> <ul> <li><code>info</code> (dict): test stand info</li> </ul> <p>Example:</p> <pre><code>def test_stand_info():\n    set_stand_info({\"some_info\": \"123\"})\n</code></pre>"},{"location":"documentation/pytest_hardpy/#set_stand_location","title":"set_stand_location","text":"<p>Writes a string with a test stand location. When called again, the exception <code>DuplicateTestStandLocationError</code> will be caused.</p> <p>Example:</p> <pre><code>def test_stand_info():\n    set_stand_location(\"Moon\")\n</code></pre>"},{"location":"documentation/pytest_hardpy/#set_stand_number","title":"set_stand_number","text":"<p>Writes a integer number with a test stand number. When called again, the exception <code>DuplicateTestStandNumberError</code> will be caused. When called with negative or non-integer number, the exception <code>TestStandNumberError</code> will be caused.</p> <p>Arguments:</p> <ul> <li><code>number</code> (int): test stand number</li> </ul> <p>Example:</p> <pre><code>def test_stand_number():\n    set_stand_number(3)\n</code></pre>"},{"location":"documentation/pytest_hardpy/#set_driver_info","title":"set_driver_info","text":"<p>The function records a dictionary containing information about the test stand driver. The data is updated with new information each time the function is called.</p> <p>Driver data is stored in both statestore and runstore databases.</p> <p>Arguments:</p> <ul> <li><code>drivers</code> (dict): A dictionary of drivers, where keys are driver names and values are driver-specific data.</li> </ul> <p>Example:</p> <pre><code>def test_driver_info():\n    drivers = {\n        \"driver_1\": {\n            \"name\": \"Driver A\",\n            \"type\": \"network\"\n        }\n    }\n    set_driver_info(drivers)\n</code></pre>"},{"location":"documentation/pytest_hardpy/#set_case_artifact","title":"set_case_artifact","text":"<p>Writes a dictionary with a test case artifact. When called again, the data will be added to DB.</p> <p>Artifacts are saved only in the runstore database because the state in statestore and case artifact must be separated.</p> <p>The <code>set_case_artifact</code> function must be called from a test case.</p> <p>Arguments:</p> <ul> <li><code>data</code> (dict): data</li> </ul> <p>Example:</p> <pre><code>def test_case_artifact():\n    set_case_artifact({\"data_str\": \"123DATA\"})\n</code></pre>"},{"location":"documentation/pytest_hardpy/#set_module_artifact","title":"set_module_artifact","text":"<p>Writes a dictionary with a module test artifact. When called again, the data will be added to DB.</p> <p>Artifacts are saved only in the runstore database because the state in statestore and module artifact must be separated.</p> <p>The <code>set_module_artifact</code> function must be called from a test case.</p> <p>Arguments:</p> <ul> <li><code>data</code> (dict): data</li> </ul> <p>Example:</p> <pre><code>def test_module_artifact():\n    set_module_artifact({\"data_str\": \"456DATA\"})\n</code></pre>"},{"location":"documentation/pytest_hardpy/#set_run_artifact","title":"set_run_artifact","text":"<p>Writes a dictionary with a test run artifact. When called again, the data will be added to DB.</p> <p>Artifacts are saved only in the runstore database because the state in statestore and run artifact must be separated.</p> <p>Arguments:</p> <ul> <li><code>data</code> (dict): data</li> </ul> <p>Example:</p> <pre><code>def test_run_artifact():\n    set_run_artifact({\"data_str\": \"789DATA\"})\n</code></pre>"},{"location":"documentation/pytest_hardpy/#set_message","title":"set_message","text":"<p>Writes a string with a message. If a message is sent without a key, the key will be generated automatically and the messages will be appended. If the message is sent with a known key, it will be updated.</p> <p>The <code>set_message</code> function must be called from a test case.</p> <p>Arguments:</p> <ul> <li><code>msg</code> (str): Message content.</li> <li><code>msg_key</code> (Optional[str]): Message ID. If not specified, a random ID will be generated.</li> </ul> <p>Example:</p> <pre><code>def test_message():\n    set_message(\"Test message\")\n    set_message(\"Update message 1\", \"msg_upd\")\n    set_message(\"Update message 2\", \"msg_upd\")\n</code></pre>"},{"location":"documentation/pytest_hardpy/#set_operator_message","title":"set_operator_message","text":"<p>Sets an operator message in the statestore database and updates the database. Does not provide user interaction unlike the run_dialog_box function.</p> <p>Arguments:</p> <ul> <li><code>msg</code> (str): The message to be displayed.</li> <li><code>title</code> (str | None): The optional title for the message.</li> <li><code>block</code> (bool=True): If True, the function will block until the message is closed.</li> <li><code>image</code> (ImageComponent | None): Image information.</li> <li><code>html</code> (HTMLComponent | None): HTML information.</li> <li><code>font_size</code>: (int=14): Text font size.</li> </ul> <p>Example:</p> <pre><code>from hardpy import set_operator_message\n\ndef test_set_operator_msg():\n    set_operator_message(msg=\"This is a sample operator message.\", title=\"Important Notice\")\n</code></pre>"},{"location":"documentation/pytest_hardpy/#clear_operator_message","title":"clear_operator_message","text":"<p>Clears the current message to the operator if it exists, otherwise does nothing.</p> <p>Example:</p> <pre><code>from time import sleep\nfrom hardpy import set_operator_message, clear_operator_message\n\ndef test_clear_operator_msg():\n    hardpy.set_operator_message(msg=\"Clearing operator message.\", title=\"Operator message\", block=False)\n    sleep(2)\n    clear_operator_message()\n</code></pre>"},{"location":"documentation/pytest_hardpy/#run_dialog_box","title":"run_dialog_box","text":"<p>Displays a dialog box and updates the <code>dialog_box</code> field in the statestore database.</p> <p>The <code>run_dialog_box</code> function must be called from a test case.</p> <p>Arguments:</p> <ul> <li><code>dialog_box_data</code> (DialogBox): Data for the dialog box.</li> </ul> <p>Returns:</p> <ul> <li>(Any): An object containing the user's response.</li> </ul> <p>The type of the return value depends on the widget type:</p> <ul> <li>Without widget (BASE): bool.</li> <li>NUMERIC_INPUT: float.</li> <li>TEXT_INPUT: str.</li> <li>RADIOBUTTON: str.</li> <li>CHECKBOX: List(str).</li> <li>MULTISTEP: bool.</li> </ul> <p>Raises</p> <ul> <li><code>ValueError</code>: If the <code>message</code> argument is empty.</li> </ul> <p>Example:</p> <pre><code>from hardpy import dialog_box\ndef test_text_input():\n    dbx = DialogBox(\n        dialog_text=\"Type 'ok' and press the Confirm button\",\n        title_bar=\"Example of text input\",\n        widget=TextInputWidget(),\n        image=ImageComponent(address=\"assets/test.png\", width=50),\n    )\n    response = run_dialog_box(dbx)\n    set_message(f\"Entered text {response}\")\n    assert response == \"ok\", \"The entered text is not correct\"\n</code></pre>"},{"location":"documentation/pytest_hardpy/#get_current_report","title":"get_current_report","text":"<p>Returns the current report from the database runstore.</p> <p>Returns:</p> <ul> <li>(ResultRunStore | None): report, or None if not found or invalid</li> </ul> <p>Example:</p> <pre><code>def test_current_report():\n    report = get_current_report()\n</code></pre>"},{"location":"documentation/pytest_hardpy/#get_current_attempt","title":"get_current_attempt","text":"<p>Returns the num of current attempt.</p> <p>The <code>get_current_attempt</code> function must be called from a test case.</p> <p>Returns:</p> <ul> <li>(int): num of current attempt</li> </ul> <p>Example:</p> <pre><code>@pytest.mark.attempt(5)\ndef test_attempt_message():\n    attempt = hardpy.get_current_attempt()\n    hardpy.set_message(f\"Current attempt {attempt}\")\n    if attempt &lt; 5:\n        assert False\n</code></pre>"},{"location":"documentation/pytest_hardpy/#class","title":"Class","text":""},{"location":"documentation/pytest_hardpy/#dialogbox","title":"DialogBox","text":"<p>The class is used to configure the dialogue box and is used with the run_dialog_box function.</p> <p>Arguments:</p> <ul> <li><code>dialog_text</code> (str): The text of the dialog box.</li> <li><code>title_bar</code> (str | None): The title bar of the dialog box. If the title_bar field is missing, it is the case name.</li> <li><code>widget</code> (IWidget | None): Widget information.</li> <li><code>image</code> (ImageComponent | None): Image information.</li> <li><code>html</code> (HTMLComponent | None): HTML information.</li> <li><code>font_size</code>: (int=14): Text font size.</li> </ul> <p>Widget list:</p> <ul> <li>Base, only dialog text;</li> <li>Text input, TextInputWidget;</li> <li>Numeric input, NumericInputWidget;</li> <li>Radiobutton, RadiobuttonWidget;</li> <li>Checkbox, CheckboxWidget;</li> <li>Multistep, MultistepWidget.</li> </ul> <p>Example:</p> <pre><code>    DialogBox(title_bar=\"Example title\", dialog_text=\"Example text\")\n</code></pre>"},{"location":"documentation/pytest_hardpy/#textinputwidget","title":"TextInputWidget","text":"<p>The class is used to configure text input widget in dialog box. Further information can be found in section text input field. Widget returns a string when using run_dialog_box.</p> <p>Example:</p> <pre><code>    dbx = DialogBox(\n        dialog_text=\"Type 'ok' and press the Confirm button\",\n        title_bar=\"Example of text input\",\n        widget=TextInputWidget(),\n    )\n    response = run_dialog_box(dbx)\n</code></pre>"},{"location":"documentation/pytest_hardpy/#numericinputwidget","title":"NumericInputWidget","text":"<p>The class is used to configure numeric input widget in dialog box. Further information can be found in section numeric input field. Widget returns a float when using run_dialog_box.</p> <p>Example:</p> <pre><code>    dbx = DialogBox(\n        dialog_text=f\"Enter the number {test_num} and press the Confirm button\",\n        title_bar=\"Example of entering a number\",\n        widget=NumericInputWidget(),\n    )\n    response = int(run_dialog_box(dbx))\n</code></pre>"},{"location":"documentation/pytest_hardpy/#radiobuttonwidget","title":"RadiobuttonWidget","text":"<p>The class is used to configure radiobutton widget in dialog box. Further information can be found in section radiobutton. Widget returns a string with the selected radiobutton value run_dialog_box.</p> <p>Arguments:</p> <ul> <li><code>fields</code> (list[str]): Radiobutton fields.</li> </ul> <p>Example:</p> <pre><code>    dbx = DialogBox(\n        dialog_text='Select item \"one\" out of several and click Confirm.',\n        title_bar=\"Radiobutton example\",\n        widget=RadiobuttonWidget(fields=[\"one\", \"two\", \"three\"]),\n    )\n    response = run_dialog_box(dbx)\n</code></pre>"},{"location":"documentation/pytest_hardpy/#checkboxwidget","title":"CheckboxWidget","text":"<p>The class is used to configure checkbox widget in dialog box. Further information can be found in section checkbox. Widget returns a list of string with the selected checkbox value run_dialog_box.</p> <p>Arguments:</p> <ul> <li><code>fields</code> (list[str]): Checkbox fields.</li> </ul> <p>Example:</p> <pre><code>    dbx = DialogBox(\n        dialog_text='Select items \"one\" and \"two\" and click the Confirm button',\n        title_bar=\"Checkbox example\",\n        widget=CheckboxWidget(fields=[\"one\", \"two\", \"three\"]),\n    )\n    response = run_dialog_box(dbx)\n</code></pre>"},{"location":"documentation/pytest_hardpy/#stepwidget","title":"StepWidget","text":"<p>The class is used to configure the step for the multistep widget in dialog box.</p> <p>Arguments:</p> <ul> <li><code>title</code> (str): Step title.</li> <li><code>text</code> (str | None): Step text.</li> <li><code>image</code> (ImageComponent | None): Step image.</li> <li><code>html</code> (HTMLComponent | None): Step HTML.</li> </ul> <p>Example:</p> <pre><code>    StepWidget(\"Step 1\", text=\"Content for step\")\n</code></pre>"},{"location":"documentation/pytest_hardpy/#multistepwidget","title":"MultistepWidget","text":"<p>The class is used to configure multistep widget in dialog box. Further information can be found in section multiple steps.</p> <p>Arguments:</p> <ul> <li><code>steps</code> (list[StepWidget]): A list with info about the steps.</li> </ul> <p>Example:</p> <pre><code>    steps = [\n        StepWidget(\"Step 1\", text=\"Content for step\"),\n        StepWidget(\"Step 2\", text=\"Content for step 2\", image=ImageComponent(address=\"assets/test.png\", width=100)),\n        StepWidget(\"Step 3\", text=\"Content for step 3\", html=HTMLComponent(html=\"https://everypinio.github.io/hardpy/\", width=50)),\n    ]\n    dbx = DialogBox(dialog_text=\"Follow the steps and click Confirm\", widget=MultistepWidget(steps))\n    response = run_dialog_box(dbx)\n</code></pre>"},{"location":"documentation/pytest_hardpy/#imagecomponent","title":"ImageComponent","text":"<p>A class for configuring an image for a dialogue box or operator message box and is used with the run_dialog_box and set_operator_message functions.</p> <p>Arguments:</p> <ul> <li><code>address</code> (str): Image address.</li> <li><code>width</code> (int | None): Image width in %.</li> <li><code>border</code> (int | None): Image border width.</li> </ul> <p>Example:</p> <pre><code>    ImageComponent(address=\"assets/test.png\", width=100)\n</code></pre>"},{"location":"documentation/pytest_hardpy/#htmlcomponent","title":"HTMLComponent","text":"<p>A class for configurating HTML for a dialogue box or operator message box and is used with the run_dialog_box and set_operator_message functions.</p> <p>Arguments:</p> <ul> <li><code>code_or_url</code> (str): HTML code or link.</li> <li><code>width</code> (int | None): HTML width in %.</li> <li><code>border</code> (int | None): HTML border width.</li> <li><code>is_raw_html</code> (bool): Is HTML code is raw.</li> </ul> <p>Example:</p> <pre><code>    HTMLComponent(code_or_url=\"https://everypinio.github.io/hardpy/\", width=100, is_raw_html=False)\n</code></pre>"},{"location":"documentation/pytest_hardpy/#couchdbloader","title":"CouchdbLoader","text":"<p>Used to write reports to the database CouchDB.</p> <p>Report names (revision id) are automatically generated based on the test completion date and the device serial number. If the serial number dut is empty, a random identifier with prefix <code>no_serial</code> is used. The random identifier is a unique string generated using the <code>uuid4()</code> function from the <code>uuid</code> module in Python. This allows for easy identification and sorting of reports.</p> <ul> <li>Valid report name: <code>report_1726496218_1234567890</code></li> <li>Valid report name (no serial number): <code>report_1726496218_no_serial_808007</code></li> </ul> <p>Functions:</p> <ul> <li><code>load</code> (ResultRunStore): Load report to the CouchDB report database.</li> </ul> <p>Example:</p> <pre><code># conftest\ndef finish_executing():\n    report = get_current_report()\n    if report:\n        loader = CouchdbLoader(CouchdbConfig())\n        loader.load(report)\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef fill_actions_after_test(post_run_functions: list):\n    post_run_functions.append(finish_executing)\n    yield\n</code></pre>"},{"location":"documentation/pytest_hardpy/#standcloudloader","title":"StandCloudLoader","text":"<p>Used to write reports to the StandCloud. A login to StandCloud is required to work.</p> <p>Arguments:</p> <ul> <li><code>address</code> (str | None): StandCloud address. Defaults to None   (the value is taken from hardpy.toml). Can be used outside of HardPy applications.</li> </ul> <p>Functions:</p> <ul> <li><code>healthcheck</code>: Healthcheck of StandCloud API.   Returns the <code>requests.Response</code> object.</li> <li><code>load</code> (ResultRunStore): Load report to the StandCloud.   Returns the <code>requests.Response</code> object.   Status code 201 is considered a successful status.</li> </ul> <p>Example:</p> <pre><code># conftest\ndef finish_executing():\n    report = get_current_report()\n    if report:\n        try:\n            loader = StandCloudLoader()\n            response = loader.load(report)\n            if response.status_code != HTTPStatus.CREATED:\n                set_operator_message(\n                    \"Report not uploaded to StandCloud, \"\n                    f\"status code: {response.status_code}, text: {response.text}\",\n                )\n        except StandCloudError as exc:\n            set_operator_message(f\"{exc}\")\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef fill_actions_after_test(post_run_functions: list):\n    post_run_functions.append(finish_executing)\n    yield\n</code></pre>"},{"location":"documentation/pytest_hardpy/#standcloudconnector","title":"StandCloudConnector","text":"<p>Used to create the StandCloud connection addresses.</p> <p>Arguments:</p> <ul> <li><code>addr</code> (str): StandCloud service name.   For example: demo.standcloud.io</li> <li><code>api_mode</code> (StandCloudAPIMode): StandCloud API mode:   hardpy for test stand, integration for third-party service.   Default: <code>StandCloudAPIMode.HARDPY</code></li> <li><code>api_version</code> (int): StandCloud API version.   Default: 1.</li> </ul>"},{"location":"documentation/pytest_hardpy/#standcloudreader","title":"StandCloudReader","text":"<p>Used to read data from the StandCloud. A login to StandCloud is required to work. For more information, see the example StandCloud reader</p> <p>Arguments:</p> <ul> <li><code>sc_connector</code> (StandCloudConnector): StandCloud connection data.</li> </ul> <p>Functions:</p> <ul> <li><code>test_run</code> (run_id: str, params: dict[str, Any]) - get run data from <code>/test_run</code> endpoint.   All test run filters can view in REST documentation.   Return <code>requests.Response</code> class with test run data.</li> <li><code>tested_dut</code> (params: dict[str, Any]) - get last tested DUT's data from <code>/tested_dut</code> endpoint.   All tested dut's filters can view in REST documentation.   Return <code>requests.Response</code> class with tested DUT's data.</li> </ul> <p>In terms of filters, the difference between <code>test_run</code> and <code>tested_dut</code> in terms of filters is that in test_run allows you to request a filter for the number of runs - <code>number_of_attempt</code>, while tested_dut allows you to request a filter for the number of runs - <code>attempt_count</code>. In other words, <code>tested_dut</code> will return the last run with the specified number of runs specified in <code>attempt_count</code>, and <code>test_run</code> will return the runs whose start number is equal to the <code>number_of_attempt</code> specified in the filter.</p> <p>Examples:</p> <pre><code>    reader = StandCloudReader(StandCloudConnector(addr=\"demo.standcloud.io\"))\n\n    response = reader.test_run(run_id=\"0196434d-e8f7-7ce1-81f7-e16f20487494\")\n    status_code = response.status_code\n    response_data = response.json()\n    print(response_data)\n\n    param = {\"part_number\": \"part_number_1\", \"status\": \"pass\", \"firmware_version\": \"1.2.3\"}\n    response = reader.test_run(params=param)\n    status_code = response.status_code\n    response_data = response.json()\n    print(response_data)\n\n    response = reader.tested_dut(param)\n    status_code = response.status_code\n    response_data = response.json()\n    print(response_data)\n</code></pre>"},{"location":"documentation/pytest_hardpy/#fixture","title":"Fixture","text":""},{"location":"documentation/pytest_hardpy/#post_run_functions","title":"post_run_functions","text":"<p>To execute actions at the end of testing, you can use the fixture post_run_functions. This fixture is a <code>list[Callable]</code> and you can write functions into it that must be executed at the end of testing.</p> <p>Fill this list in conftest.py and functions from this list will be called after tests run (at the end of pytest_sessionfinish).</p> <p>Returns:</p> <ul> <li>(list[Callable]): list of post run methods</li> </ul> <p>Example:</p> <pre><code># conftest.py file\ndef finish_executing():\n    print(\"Pytest finished\")\n\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef fill_actions_after_test(post_run_functions: list):\n    post_run_functions.append(finish_executing)\n    yield\n</code></pre>"},{"location":"documentation/pytest_hardpy/#marker","title":"Marker","text":""},{"location":"documentation/pytest_hardpy/#case_name","title":"case_name","text":"<p>Sets a text name for the test case (default: function name)</p> <p>Example:</p> <pre><code>@pytest.mark.case_name(\"Simple case 1\")\ndef test_one():\n    assert True\n</code></pre>"},{"location":"documentation/pytest_hardpy/#module_name","title":"module_name","text":"<p>Sets a text name for the test module (file) (default: module name)</p> <p>Example:</p> <pre><code>pytestmark = pytest.mark.module_name(\"Module 1\")\n</code></pre>"},{"location":"documentation/pytest_hardpy/#dependency","title":"dependency","text":"<p>Skips the test case/module if the main test fails/skipped/errored. For more information, see the example skip test and skip feature description.</p> <p>Example:</p> <pre><code>#test_1.py\ndef test_one():\n    assert False\n\n@pytest.mark.dependency(\"test_1::test_one\")\ndef test_two():\n    assert True\n</code></pre>"},{"location":"documentation/pytest_hardpy/#attempt","title":"attempt","text":"<p>If a test is marked <code>attempt</code>, it will be repeated if it fails the number of attempts specified by the mark. The test will be repeated until it is passed. There is a 1 second pause between attempts. For more information, see the example attempts.</p> <p>Example:</p> <pre><code>@pytest.mark.attempt(5)\ndef test_attempts():\n    assert False\n</code></pre>"},{"location":"documentation/pytest_hardpy/#critical","title":"critical","text":"<p>Marks test or module as critical. Failing/skipped critical tests skip all subsequent tests. For implementation details see critical tests example.</p> <p>Example (test level):</p> <pre><code>@pytest.mark.critical\ndef test_core_feature():\n    assert check_core_functionality()\n</code></pre> <p>Example (module level):</p> <pre><code>pytestmark = pytest.mark.critical\n\ndef test_db_connection():\n    assert connect_to_database()\n</code></pre> <p>Behavior:</p> <ul> <li>Critical test passes - Continue normally</li> <li>Critical test fails/skips - Skip all remaining tests</li> <li>Any test fails in critical module - Skip all remaining tests</li> </ul>"},{"location":"documentation/pytest_hardpy/#options","title":"Options","text":"<p>pytest-hardpy has several options to run:</p>"},{"location":"documentation/pytest_hardpy/#hardpy-pt","title":"hardpy-pt","text":"<p>Option to enable the pytest-hardpy plugin.</p> <pre><code>--hardpy-pt\n</code></pre>"},{"location":"documentation/pytest_hardpy/#hardpy-db-url","title":"hardpy-db-url","text":"<p>The CouchDB instance url for the statestore and runstore databases. The default is <code>http://dev:dev@localhost:5984/</code>.</p> <pre><code>--hardpy-db-url\n</code></pre>"},{"location":"documentation/pytest_hardpy/#hardpy-tests-name","title":"hardpy-tests-name","text":"<p>The HardPy tests name. The default value is Tests.</p> <pre><code>--hardpy-tests-name\n</code></pre>"},{"location":"documentation/pytest_hardpy/#hardpy-clear-database","title":"hardpy-clear-database","text":"<p>Option to clean statestore and runstore databases before running pytest.</p> <pre><code>--hardpy-clear-database\n</code></pre>"},{"location":"documentation/pytest_hardpy/#sc-address","title":"sc-address","text":"<p>StandCloud address. The default is empty string.</p> <pre><code>--sc-address\n</code></pre>"},{"location":"documentation/pytest_hardpy/#sc-connection-only","title":"sc-connection-only","text":"<p>Check StandCloud service availability. The default is False.</p> <pre><code>--sc-connection-only\n</code></pre>"},{"location":"documentation/stand_cloud/","title":"StandCloud","text":""},{"location":"documentation/stand_cloud/#about-standcloud","title":"About StandCloud","text":"<p>StandCloud is a cloud management tool for electronics manufacturing. Test data is crucial for evaluating performance. StandCloud allows you to explore data patterns, create visualizations, and gain insights. This helps in identifying potential trends and opportunities. It allows you to identify potential limitations.</p> <p>For more information, visit the StandCloud website.</p>"},{"location":"documentation/stand_cloud/#standcloud-and-hardpy-integration","title":"StandCloud and HardPy integration","text":"<p>HardPy allows test result data to be stored in the StandCloud and read them from the StandCloud. For an example of StandCloud and HardPy integration, see StandCloud example and StandCloud readed example.</p> <p>To authorize in StandCloud you need to know the address of your StandCloud service. To obtain one, contact info@everypin.io.</p> <p>Address must be added to hardpy.toml in <code>stand_cloud</code> section:</p> <pre><code>[stand_cloud]\naddress = \"demo.standcloud.io\"\n</code></pre> <p>You need to run the command:</p> <p><pre><code>hardpy sc-login &lt;stand_cloud_address&gt;\n</code></pre> where  is the StandCloud service address. StandCloud uses OAuth2 device authorization grant - RFC8628. Then go to the authorization link in the terminal and open the link to the browser. You will need to enter your StandCloud login and password. After successful authorization, you should press the <code>Accept</code> button. <p>To check the StandCloud connection status, run the command:</p> <pre><code>hardpy sc-login --check &lt;stand_cloud_address&gt;\n</code></pre> <p>The StandCloud authentication time is updated each time you interact with StandCloud. If you do not use StandCloud services, the authentication will be canceled and the <code>hardpy sc-login</code> function must be called again. To clarify and edit your authentication time case, you can contact info@everypin.io.</p> <p>To logout from StandCloud service run the command:</p> <pre><code>hardpy sc-logout &lt;stand_cloud_address&gt;\n</code></pre> <p>Third party applications can authorize in StandCloud. This process is described in the StandCloud third party authorization example.</p>"},{"location":"documentation/stand_cloud/#hardpy-rules","title":"HardPy rules","text":""},{"location":"documentation/stand_cloud/#database-mandatory-fields","title":"Database mandatory fields","text":"<p>In order to populate the StandCloud database, it is mandatory to populate some fields in the HardPy database.</p> <ol> <li>DUT part number. Fills with the    set_dut_part_number function.</li> <li>Test stand name. Fills with the    set_stand_name function.</li> </ol> <p>So, a minimal example of a test plan for successfully filling a StandCloud database:</p> <pre><code>import hardpy\n\ndef test_example():\n    hardpy.set_dut_part_number(\"part_number_example\")\n    hardpy.set_stand_name(\"stand_name_example\")\n</code></pre> <p>These database fields are required for minimal StandCloud analytics. The <code>StandCloudLoader.load()</code> function will return a code 422 if these fields are not filled in. Other required database fields are automatically filled by HardPy. See HardPy database specification in Runstore section.</p>"},{"location":"documentation/stand_cloud/#general-guidelines","title":"General guidelines","text":"<p>Some tips for getting the best analytics in StandCloud.</p> <ol> <li>Use the set_dut_serial_number    to store DUT serial number.    The serial number allows you to distinguish between units with    the same part number. It also allows you to analyze the    number of attempts to test a device.</li> <li>Use the set_case_artifact,    set_module_artifact,    and set_run_artifact    to store important information, such as measurement results or case attempt.    Artifacts are not displayed in the operator panel.    They can contain more complex data structures and can be used    for data analysis, unlike set_message    which only stores strings.</li> <li>Use the set_stand_info,    set_dut_info and    set_driver_info    to store important information about DUT or test stand.    Don't store DUT or test stand information such as hardware/software    revisions or stand components in artifacts.</li> <li>Use the case_name    and module_name    markers for human-readable names.    They make it easier to analyze the tests.</li> </ol>"},{"location":"examples/","title":"Examples","text":"<p>HardPy includes working examples directly in the package in the examples folder. However, the documentation contains more examples, which you can explore in this section.</p>"},{"location":"examples/attempts/","title":"Attempts","text":"<p>In HardPy library, the @pytest.mark.attempt(n) marker allows you to configure a test to be retried a specified number of times <code>(n)</code> if it initially fails. This functionality is particularly useful for tests that might encounter transient errors or require multiple attempts to succeed due to external factors. The code for this example can be seen inside the hardpy package Attempts.</p> <p>Contains some examples of valid tests with attempts.</p>"},{"location":"examples/attempts/#how-to-start","title":"how to start","text":"<ol> <li>Launch <code>hardpy init attempts</code>.</li> <li>Launch CouchDH instance.</li> <li>Modify the files described below.</li> <li>Launch <code>hardpy run attempts</code>.</li> </ol>"},{"location":"examples/attempts/#conftestpy","title":"conftest.py","text":"<pre><code>import datetime\nimport pytest\n\nclass CurrentMinute:\n    def get_minute(self):\n        current_time = datetime.datetime.now()\n        return int(current_time.strftime(\"%M\"))\n\n@pytest.fixture\ndef current_minute():\n    current_time = CurrentMinute()\n    yield current_time\n</code></pre>"},{"location":"examples/attempts/#test_1py","title":"test_1.py","text":"<pre><code>from time import sleep\nimport pytest\nimport hardpy\nfrom hardpy import DialogBox, TextInputWidget, run_dialog_box\n\n@pytest.mark.attempt(5)\ndef test_minute_parity(current_minute):\n    attempt = hardpy.get_current_attempt()\n    hardpy.set_message(f\"Current attempt {attempt}\", \"updated_status\")\n    if attempt &gt; 1:\n        sleep(15)\n\n    minute = current_minute.get_minute()\n    hardpy.set_message(f\"Current minute {minute}\")\n    hardpy.set_case_artifact({\"minute\": minute})\n\n    assert minute % 2 == 0, f\"The test failed because {minute} is odd! Try again!\"\n\n@pytest.mark.attempt(3)\ndef test_dialog_box():\n    dbx = DialogBox(\n        dialog_text=\"Print 'ok', if you want to pass attempt.\",\n        title_bar=\"Example of text input\",\n        widget=TextInputWidget(),\n    )\n    response = run_dialog_box(dbx)\n    if response != \"ok\":\n        dbx = DialogBox(\n            dialog_text=f\"Test attempt {hardpy.get_current_attempt()}\",\n            title_bar=\"Attempt message\",\n        )\n        run_dialog_box(dbx)\n\n    assert response == \"ok\", \"The entered text is not correct\"\n</code></pre>"},{"location":"examples/couchdb_load/","title":"Couchdb load","text":"<p>This is an example of storing the test result in CouchDB. Test reports are written to the report database at the end of  the testing process via CouchdbLoader. The code for this example can be seen inside the hardpy package  CouchDB Load.</p>"},{"location":"examples/couchdb_load/#how-to-start","title":"how to start","text":"<ol> <li>Launch <code>hardpy init couchdb_load</code>.</li> <li>Launch CouchDH instance.</li> <li>Modify the files described below.</li> <li>Launch <code>hardpy run couchdb_load</code>.</li> </ol>"},{"location":"examples/couchdb_load/#conftestpy","title":"conftest.py","text":"<p>Contains settings and fixtures for all tests:</p> <ul> <li>The function of generating a report and recording it in the database <code>save_report_to_couchdb</code>;</li> <li>The list of actions that will be performed after testing is filled in function <code>fill_actions_after_test</code>;</li> </ul> <pre><code>import pytest\nfrom hardpy import (\n    CouchdbLoader,\n    CouchdbConfig,\n    get_current_report,\n)\n\ndef save_report_to_couchdb():\n    report = get_current_report()\n    if report:\n        loader = CouchdbLoader(CouchdbConfig())\n        loader.load(report)\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef fill_actions_after_test(post_run_functions: list):\n    post_run_functions.append(save_report_to_couchdb)\n    yield\n</code></pre>"},{"location":"examples/couchdb_load/#test_1py","title":"test_1.py","text":"<p>Contains two simple examples of a valid test.</p> <pre><code>def test_one():\n    assert True\n\ndef test_two():\n    assert True\n</code></pre>"},{"location":"examples/couchdb_load/#test_2py","title":"test_2.py","text":"<p>Contains two simple examples: a valid test and an invalid test.</p> <pre><code>def test_three():\n    assert True\n\ndef test_four():\n    raise AssertionError\n</code></pre>"},{"location":"examples/critical_test/","title":"Critical test marker","text":"<p>This is example of using the critical marker in pytest-hardpy to control test execution flow.</p> <p>The <code>@pytest.mark.critical</code> marker allows to designate tests or entire modules as critical. If a critical test fails or is skipped, all subsequent tests in the current and following modules will be skipped.</p>"},{"location":"examples/critical_test/#how-to-start","title":"how to start","text":"<ol> <li>Launch <code>hardpy init critical_test</code>.</li> <li>Launch CouchDH instance.</li> <li>Modify the files described below.</li> <li>Launch <code>hardpy run critical_test</code>.</li> </ol>"},{"location":"examples/critical_test/#test_criticalpy","title":"test_critical.py","text":"<pre><code>import pytest\n\n@pytest.mark.critical\ndef test_core_feature():\n    assert False  # This will fail\n\ndef test_secondary_feature():\n    assert True  # This will be skipped\n</code></pre> <p>Output:</p> <ul> <li><code>test_core_feature</code>: Failed</li> <li><code>test_secondary_feature</code>: Skipped</li> </ul>"},{"location":"examples/critical_test/#test_module_apy","title":"test_module_a.py","text":"<pre><code>import pytest\n\npytestmark = pytest.mark.critical\n\ndef test_a1():\n    assert False  # Fails\n\ndef test_a2():\n    assert True  # Skipped\n</code></pre>"},{"location":"examples/critical_test/#test_module_bpy","title":"test_module_b.py","text":"<pre><code>def test_b1():\n    assert True  # Skipped because module_a failed\n</code></pre> <p>Output:</p> <ul> <li><code>test_a1</code>: Failed</li> <li><code>test_a2</code>: Skipped</li> <li><code>test_b1</code>: Skipped</li> </ul>"},{"location":"examples/db_in_ram/","title":"Storing CouchDB database in RAM","text":"<p>When using one of the methods below, the database data will be saved to a  folder in temporary storage, and after the computer is turned off, the data will be deleted.</p> <p>Here are instructions for saving the database in RAM for different  methods of launching the database:</p> <ul> <li>in linux with binary packages</li> <li>in linux with docker-compose.yaml</li> <li>in windows with binary packages</li> <li>in windows with docker-compose.yaml</li> </ul>"},{"location":"examples/db_in_ram/#linux","title":"linux","text":""},{"location":"examples/db_in_ram/#binary-packages","title":"binary packages","text":"<p>Start the database according to the  instructions</p> <ul> <li>Create a CouchDB folder in the temporary file storage:</li> </ul> <pre><code>sudo mkdir /dev/shm/couchdb\n</code></pre> <ul> <li>Add editing rights to this folder:</li> </ul> <pre><code>sudo chmod 777 /dev/shm/couchdb\n</code></pre> <ul> <li>Edit the database_dir parameter in the database configuration  file <code>/opt/couchdb/etc/default.ini</code>:</li> </ul> <pre><code>[couchdb]\ndatabase_dir = ./../../dev/shm/couchdb\n</code></pre> <ul> <li>Restart the couchdb service:</li> </ul> <pre><code>sudo service couchdb restart\n</code></pre>"},{"location":"examples/db_in_ram/#docker","title":"docker","text":"<p>Start the database according to the  instructions (steps 1-3)</p> <p>Example of <code>docker-compose.yaml</code> file with saving files in RAM:</p> <pre><code>version: \"3.8\"\n\nservices:\n  couchserver:\n    image: couchdb:3.4\n    ports:\n      - \"5984:5984\"\n    environment:\n      COUCHDB_USER: dev\n      COUCHDB_PASSWORD: dev\n    volumes:\n      - /dev/shm/couchdb:/opt/couchdb/data\n      - ./docker/couchdb.ini:/opt/couchdb/etc/local.ini\n</code></pre> <p>Run docker compose in the root directory to launch DB.</p> <pre><code>docker compose up\n</code></pre> <p>To stop the database, run the command:</p> <pre><code>docker compose down\n</code></pre>"},{"location":"examples/db_in_ram/#windows","title":"windows","text":""},{"location":"examples/db_in_ram/#virtual-hard-disk","title":"virtual hard disk","text":"<p>You need to create a virtual hard disk on which the database will be saved.</p> <ul> <li>Open the command prompt using <code>Win+R</code>, type <code>diskmgmt.msc</code>, and press <code>Enter</code>.</li> <li>Click Action &gt; Create Virtual Hard Disk.</li> <li>Specify any Location, set Size (e.g., 30 MB), choose VHD type and Fixed size.</li> <li>Right-click the created disk (left pane), select Initialize Disk, choose GUID Partition Table.</li> <li>Right-click the created disk (right pane), select New Simple Volume, Assign drive  letter (e.g., <code>K</code>), click Next twice, then Finish.</li> <li>Create a folder named <code>couchdb</code> in the created drive (<code>K</code> in our case) using File Explorer.</li> </ul>"},{"location":"examples/db_in_ram/#binary-packages_1","title":"binary packages","text":"<p>Start the database according to the  instructions</p> <ul> <li>Open the file located at <code>C:/CouchDB/etc/default.ini</code> as administrator.</li> <li>Set the value of the database_dir parameter to <code>K:/couchdb</code>.</li> <li>Save and close the file.</li> <li>Open the Services console using <code>Win+R</code>, type <code>services.msc</code>, and press <code>Enter</code>.</li> <li>Locate the Apache CouchDB service and restart it.</li> </ul>"},{"location":"examples/db_in_ram/#docker_1","title":"docker","text":"<p>Start the database according to the  instructions (steps 1-3)</p> <p>In <code>docker-compose.yaml</code> file in <code>volumes</code> find the string:</p> <pre><code>./docker/dbdata:/opt/couchdb/data\n</code></pre> <p>Replace this string with next value:</p> <pre><code>K:/couchdb:/opt/couchdb/data\n</code></pre> <p>Run docker compose in the root directory to launch DB.</p> <pre><code>docker compose up\n</code></pre> <p>To stop the database, run the command:</p> <pre><code>docker compose down\n</code></pre>"},{"location":"examples/dialog_box/","title":"Dialog box","text":"<p>This is an example of testing dialog boxes using the HardPy library. The code for this example can be seen inside the hardpy package Dialog Box.</p> <p>Contains some examples of valid tests for dialog boxes. To test images, create an <code>assets</code> folder in the <code>dialog_box</code> folder with the image <code>test.png</code>.</p>"},{"location":"examples/dialog_box/#how-to-start","title":"how to start","text":"<ol> <li>Launch <code>hardpy init dialog_box</code>.</li> <li>Launch CouchDH instance.</li> <li>Modify the files described below.</li> <li>Launch <code>hardpy run dialog_box</code>.</li> </ol>"},{"location":"examples/dialog_box/#test_1_base_boxpy","title":"test_1_base_box.py","text":"<pre><code>import pytest\nfrom hardpy import DialogBox, HTMLComponent, ImageComponent, run_dialog_box\n\npytestmark = pytest.mark.module_name(\"Base dialog box\")\n\n@pytest.mark.case_name(\"Empty test before\")\ndef test_before():\n    assert True\n\n@pytest.mark.case_name(\"Base dialog box with image\")\ndef test_base_dialog_box_with_image():\n    dbx = DialogBox(\n        title_bar=\"Operator check\",\n        dialog_text=\"Press the Confirm button\",\n        image=ImageComponent(address=\"assets/test.png\", width=100, border=1),\n        html=HTMLComponent(html=\"https://everypinio.github.io/hardpy/\", width=50, is_raw_html=False),\n    )\n    response = run_dialog_box(dbx)\n    assert response\n\n@pytest.mark.case_name(\"Empty test after\")\ndef test_after():\n    assert True\n</code></pre>"},{"location":"examples/dialog_box/#test_2_input_fieldpy","title":"test_2_input_field.py","text":"<pre><code>import pytest\nfrom hardpy import (\n    DialogBox,\n    ImageComponent,\n    NumericInputWidget,\n    TextInputWidget,\n    run_dialog_box,\n    set_message,\n)\n\npytestmark = pytest.mark.module_name(\"Input field dialog boxes\")\n\n@pytest.mark.case_name(\"Text input with image\")\ndef test_text_input_with_image():\n    dbx = DialogBox(\n        dialog_text=\"Type 'ok' and press the Confirm button\",\n        title_bar=\"Example of text input\",\n        widget=TextInputWidget(),\n        image=ImageComponent(address=\"assets/test.png\", width=50),\n        font_size=18,\n    )\n    response = run_dialog_box(dbx)\n    set_message(f\"Entered text {response}\")\n    assert response == \"ok\", \"The entered text is not correct\"\n\n@pytest.mark.case_name(\"Numeric input\")\ndef test_num_input():\n    test_num = 123\n    dbx = DialogBox(\n        dialog_text=f\"Enter the number {test_num} and press the Confirm button\",\n        title_bar=\"Example of entering a number\",\n        widget=NumericInputWidget(),\n    )\n    response = int(run_dialog_box(dbx))\n    set_message(f\"Entered number {response}\")\n    assert response == test_num, \"The entered number is not correct\"\n</code></pre>"},{"location":"examples/dialog_box/#test_3_choice_controlpy","title":"test_3_choice_control.py","text":"<pre><code>import pytest\nfrom hardpy import (\n    CheckboxWidget,\n    DialogBox,\n    RadiobuttonWidget,\n    run_dialog_box,\n    set_message,\n)\n\npytestmark = pytest.mark.module_name(\"Choice control dialog boxes\")\n\n@pytest.mark.case_name(\"Test dialog box with radiobutton\")\ndef test_radiobutton():\n    dbx = DialogBox(\n        dialog_text='Select item \"one\" out of several and click Confirm.',\n        title_bar=\"Radiobutton example\",\n        widget=RadiobuttonWidget(fields=[\"one\", \"two\", \"three\"]),\n    )\n    response = run_dialog_box(dbx)\n    set_message(f\"Selected item {response}\")\n    assert response == \"one\", \"The answer is not correct\"\n\n@pytest.mark.case_name(\"Test dialog box with checkbox\")\ndef test_checkbox():\n    dbx = DialogBox(\n        dialog_text='Select items \"one\" and \"two\" and click the Confirm button',\n        title_bar=\"Checkbox example\",\n        widget=CheckboxWidget(fields=[\"one\", \"two\", \"three\"]),\n    )\n    response = run_dialog_box(dbx)\n    set_message(f\"Selected item {response}\")\n    correct_answer = {\"one\", \"two\"}\n    assert set(response) == correct_answer, \"The answer is not correct\"\n</code></pre>"},{"location":"examples/dialog_box/#test_4_multiple_stepspy","title":"test_4_multiple_steps.py","text":"<pre><code>import pytest\nfrom hardpy import DialogBox, HTMLComponent, ImageComponent, MultistepWidget, StepWidget, run_dialog_box\n\npytestmark = pytest.mark.module_name(\"Multiple steps dialog box\")\n\n@pytest.mark.case_name(\"Multistep\")\ndef test_multiple_steps():\n    steps = [\n        StepWidget(\"Step 1\", text=\"Content for step\"),\n        StepWidget(\n            \"Step 2\",\n            text=\"Content for step 2\",\n            image=ImageComponent(address=\"assets/test.png\", width=50),\n        ),\n        StepWidget(\n            \"Step 3\",\n            text=None,\n            html=HTMLComponent(html=\"https://everypinio.github.io/hardpy/\", width=50, is_raw_html=False),\n        ),\n    ]\n    dbx = DialogBox(\n        dialog_text=\"Follow the steps and click Confirm\",\n        widget=MultistepWidget(steps),\n    )\n    response = run_dialog_box(dbx)\n    assert response\n</code></pre>"},{"location":"examples/dialog_box/#test_5_htmlpy","title":"test_5_html.py","text":"<pre><code>import pytest\n\nfrom hardpy import DialogBox, HTMLComponent, run_dialog_box\n\npytestmark = pytest.mark.module_name(\"Dialog box with HTML\")\n\n@pytest.mark.case_name(\"Base dialog box with html code\")\ndef test_base_dialog_box_with_html_code():\n    test_html = \"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;body&gt;\n\n    &lt;h1&gt;Test HTML Page&lt;/h1&gt;\n\n    &lt;p&gt;It is testing page.&lt;/p&gt;\n    &lt;p&gt;You can put anything on it.&lt;/p&gt;\n\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    dbx = DialogBox(\n        title_bar=\"Operator check\",\n        dialog_text=\"Press the Confirm button\",\n        html=HTMLComponent(html=test_html, is_raw_html=True, width=50),\n    )\n    response = run_dialog_box(dbx)\n    assert response\n\n@pytest.mark.case_name(\"Base dialog box with html link\")\ndef test_base_dialog_box_with_html_link():\n    dbx = DialogBox(\n        title_bar=\"Operator check\",\n        dialog_text=\"Press the Confirm button\",\n        html=HTMLComponent(\n            html=\"https://everypinio.github.io/hardpy/\",\n            is_raw_html=False,\n            border=2,\n        ),\n    )\n    response = run_dialog_box(dbx)\n    assert response\n</code></pre>"},{"location":"examples/dialog_box_plot/","title":"Plot in the dialog box","text":"<p>This example demonstrates how to create and display a plot within a dialog box using <code>matplotlib</code> and <code>mpld3</code>. The plot is generated as an HTML component and embedded into a dialog box, which can be used for testing or user interaction purposes.</p> <p>The process involves generating a plot using <code>matplotlib</code>, converting it to HTML using <code>mpld3</code>, and then embedding the HTML into a dialog box. This approach is particularly useful for scenarios where visual data needs to be presented to the user or tester in an interactive manner.</p>"},{"location":"examples/dialog_box_plot/#how-to-start","title":"how to start","text":"<ol> <li>Launch <code>hardpy init html_plot</code>.</li> <li>Install Required Packages <code>pip install matplotlib mpld3</code>.</li> <li>Create your <code>test_plot.py</code> file with the test case.</li> <li>Launch CouchDH instance.</li> <li>Launch <code>hardpy run html_plot</code>.</li> </ol>"},{"location":"examples/dialog_box_plot/#test_plotpy","title":"test_plot.py","text":"<p>The following code demonstrates how to create a simple plot and display it in a dialog box:</p> <pre><code>import matplotlib.pyplot as plt\nimport mpld3\nimport pytest\n\nfrom hardpy import DialogBox, HTMLComponent, run_dialog_box\n\npytestmark = pytest.mark.module_name(\"Dialog box with HTML\")\n\n@pytest.mark.case_name(\"Base dialog box with html code\")\ndef test_dialog_box_with_html_code():\n    fig, ax = plt.subplots()\n    ax.plot([1, 2, 3, 4], [10, 20, 25, 30])\n    ax.set_xlabel(\"X-axis\")\n    ax.set_ylabel(\"Y-axis\")\n    ax.set_title(\"Simple Plot\")\n\n    test_html = mpld3.fig_to_html(fig)\n\n    dbx = DialogBox(\n        title_bar=\"Operator check\",\n        dialog_text=\"Press the Confirm button\",\n        html=HTMLComponent(html=test_html, is_raw_html=True),\n    )\n    response = run_dialog_box(dbx)\n    assert response\n</code></pre>"},{"location":"examples/frontend_remote_access/","title":"Enabling mobile device access to the frontend","text":"<p>To allow other devices to connect to the frontend remotely, follow these steps:</p>"},{"location":"examples/frontend_remote_access/#1-determine-ip-address","title":"1. Determine IP address","text":"<p>Determine your computer's IP address. For Linux, you can use the <code>ifconfig</code> command:</p> <pre><code>ifconfig | grep \"inet \"\n</code></pre> <p>Look for an address in the format <code>192.168.x.x</code> or <code>10.x.x.x</code> (this is your local network IP).</p>"},{"location":"examples/frontend_remote_access/#2-configure-ports-in-project-files","title":"2. Configure ports in project files","text":""},{"location":"examples/frontend_remote_access/#hardpytoml-configuration","title":"<code>hardpy.toml</code> configuration","text":"<p>Edit the file to include your computer's network address:</p> <pre><code>[database]\nuser = \"dev\"\npassword = \"dev\"\nhost = \"{YOUR_COMPUTER_NETWORK_ADDRESS}\"  # Replace with address from step 2\nport = 5984\n\n[frontend]\nhost = \"{YOUR_COMPUTER_NETWORK_ADDRESS}\"  # Replace with the address from step 2 or insert \"0.0.0.0\"\nport = 8000\nlanguage = \"en\"\n</code></pre>"},{"location":"examples/frontend_remote_access/#3-launch-the-frontend","title":"3. Launch the frontend","text":"<p>You can start the frontend using <code>hardpy run</code>.</p>"},{"location":"examples/frontend_remote_access/#verification-steps","title":"Verification steps","text":"<ol> <li>On your mobile device, ensure it's connected to the same network as your computer</li> <li>Open a browser and navigate to: <code>http://[YOUR_COMPUTER_ADDRESS]:8000</code></li> <li>Verify you can see the frontend interface</li> </ol>"},{"location":"examples/frontend_remote_access/#troubleshooting","title":"Troubleshooting","text":"<p>If connection fails:</p> <ul> <li>Open required ports on your computer.</li> <li>Check all services are running (CouchDB, frontend).</li> <li>Ensure no other devices are using the same ports.</li> <li>Verify your mobile device and computer are on the same network.</li> </ul>"},{"location":"examples/frontend_remote_access/#open-required-ports-on-your-computer","title":"Open required ports on your computer","text":""},{"location":"examples/frontend_remote_access/#for-linux-using-ufw-firewall","title":"For Linux (using <code>ufw</code> firewall)","text":"<p>Run the following commands in your terminal:</p> <pre><code>sudo ufw allow 5984  # Allows CouchDB connections\nsudo ufw allow 8000  # Allows frontend access\nsudo ufw enable     # Enable the firewall if not already active\nsudo ufw status     # Verify the ports are open\n</code></pre>"},{"location":"examples/hardpy_launch/","title":"HardPy launch","text":"<p>HardPy can be started from either the operator panel or the terminal. Below we will look at all the launch options.</p>"},{"location":"examples/hardpy_launch/#how-to-start","title":"how to start","text":"<p>Initialize the HardPy project:</p> <ol> <li>Launch <code>hardpy init test_project</code>.</li> <li>Launch CouchDH instance.</li> </ol>"},{"location":"examples/hardpy_launch/#launch-options","title":"launch options","text":""},{"location":"examples/hardpy_launch/#1-operator-panel","title":"1. Operator panel","text":"<ol> <li> <p>Launch operator panel:    <pre><code>hardpy run test_project\n</code></pre></p> </li> <li> <p>Open the operator panel in your browser at: http://localhost:8000/.</p> </li> <li>Click the Start button.</li> </ol>"},{"location":"examples/hardpy_launch/#2-start-command","title":"2. Start command","text":"<ol> <li>Launch operator panel:    <pre><code>hardpy run test_project\n</code></pre></li> <li>Run the tests by executing the following command in the terminal:     <pre><code>hardpy start test_project\n</code></pre></li> </ol>"},{"location":"examples/hardpy_launch/#3-pytest-in-console","title":"3. Pytest in console","text":"<p>Run the tests by executing the following command in the terminal:</p> <pre><code>pytest test_project\n</code></pre>"},{"location":"examples/hardpy_launch/#31-pytest-in-console-with-launching-operator-panel","title":"3.1. Pytest in console with launching operator panel","text":"<p>If the operator panel is running, the tests will start after the command in the terminal in the same way as by clicking on the <code>Start</code> button.</p>"},{"location":"examples/hardpy_launch/#32-pytest-in-console-without-launching-operator-panel","title":"3.2. Pytest in console without launching operator panel","text":"<p>If the operator panel has not been started, the tests will also run, but without visualization.</p> Warning <p>This method is only appropriate if you are not using any operator panel features such as operator messages and dialog boxes.</p>"},{"location":"examples/hardpy_launch/#4-ide","title":"4. IDE","text":"<p>An example of starting in vscode is as follows. If you use other IDEs, explore the possibility of running tests in your environment.</p> <ol> <li>Open the Testing extension in VS Code.</li> <li>Run the tests through the extension interface.</li> </ol>"},{"location":"examples/hardpy_launch/#41-pytest-in-testing-with-launching-operator-panel","title":"4.1. Pytest in Testing with launching operator panel","text":"<p>If the operator panel is running, the tests will start after launching in Testing in the same way as by clicking on the <code>Start</code> button.</p>"},{"location":"examples/hardpy_launch/#42-pytest-in-testing-without-launching-operator-panel","title":"4.2. Pytest in Testing without launching operator panel","text":"<p>If the operator panel has not been started, the tests will also run, but without visualization.</p> Warning <p>This method is only appropriate if you are not using any operator panel features such as operator messages and dialog boxes.</p>"},{"location":"examples/hello_hardpy/","title":"Hello hardpy","text":"<p>This is the simplest example of using HardPy. The code for this example can be seen inside the hardpy package Hello Hardpy.</p>"},{"location":"examples/hello_hardpy/#how-to-start","title":"how to start","text":"<ol> <li>Launch <code>hardpy init hello_hardpy</code>.</li> <li>Launch CouchDH instance.</li> <li>Launch <code>hardpy run hello_hardpy</code>.</li> </ol>"},{"location":"examples/hello_hardpy/#test_1py","title":"test_1.py","text":"<p>Contains the simplest example of a valid test.</p> <pre><code>def test_one():\n    assert True\n</code></pre>"},{"location":"examples/launch_arguments/","title":"Launch arguments","text":"<p>HardPy launches pytest tests. User can add own arguments and options for test execution. For example, user can write own script for HardPy to run with special arguments, such as device serial number, and use it in tests.</p>"},{"location":"examples/launch_arguments/#how-to-start","title":"how to start","text":"<ol> <li>Launch <code>hardpy init launch_arg</code>.</li> <li>Launch CouchDH instance.</li> <li>Modify the files described below.</li> <li>Launch <code>hardpy run launch_arg</code>.</li> </ol> <p>So that you can run HardPy in separate scripts that use the arguments, you can use pytest's built-in <code>addoption</code> method. You can read more about it here.</p>"},{"location":"examples/launch_arguments/#conftestpy","title":"conftest.py","text":"<pre><code>def pytest_addoption(parser):\n    parser.addoption(\"--my-opt\", action=\"store\", help=\"add my opt\")\n\n@pytest.fixture(scope=\"session\")\ndef my_opt(request):\n    return request.config.getoption(\"--my-opt\")\n</code></pre>"},{"location":"examples/launch_arguments/#test_1py","title":"test_1.py","text":"<pre><code>def test_custom_option_1(request):\n    custom_value = request.config.getoption(\"--my-opt\")\n    print(f\"Custom option value: {custom_value}\")\n    assert custom_value == \"hello\"\n\ndef test_custom_option_2(my_opt):\n    print(f\"Custom option value: {my_opt}\")\n    assert my_opt == \"hello\"\n</code></pre>"},{"location":"examples/launch_arguments/#launch-test-with-your-parameter","title":"launch test with your parameter","text":"<p>You can launch tests with this command:</p> <pre><code>pytest --my-opt hello\n</code></pre> <p>Alternatively, you can add the parameter <code>--my-opt hello</code> to the <code>pytest.ini</code> file.</p>"},{"location":"examples/logging/","title":"Logging in tests","text":"<p>How to add logging to your tests using Python's built-in <code>logging</code> package.</p> <p>Python's built-in <code>logging</code> package provides a flexible way to add logging to your tests, which can help with debugging and monitoring test execution.</p> <p>Logging in tests is valuable because it:</p> <ul> <li>Provides visibility into test execution flow</li> <li>Helps diagnose failures by capturing context</li> <li>Creates an audit trail of test operations</li> <li>Enables performance monitoring</li> <li>Facilitates troubleshooting in CI/CD pipelines</li> </ul> <p>The logs will be written to:</p> <ul> <li>Console output</li> <li>CI/CD system logs if running in a pipeline</li> </ul> <p>While Python's <code>logging</code> package is versatile, HardPy offers additional specialized logging methods:</p> <ul> <li>Database Logging with set_message</li> <li>Interactive Dialogs with run_dialog_box </li> <li>Operator Messages with set_operator_message</li> </ul>"},{"location":"examples/logging/#how-to-implement-logging","title":"How to implement logging","text":""},{"location":"examples/logging/#basic-setup","title":"Basic setup","text":"<ol> <li> <p>Import the logging module where needed:</p> <pre><code>import logging\n</code></pre> </li> <li> <p>Add a fixture to <code>conftest.py</code>:</p> <pre><code>@pytest.fixture(scope=\"module\")\ndef module_log(request: pytest.FixtureRequest):\n    log_name = request.module.__name__\n    yield logging.getLogger(log_name)\n</code></pre> </li> </ol>"},{"location":"examples/logging/#using-the-logger","title":"Using the logger","text":"<p>You can call logging commands anywhere in your tests:</p> <pre><code>self._log.warning(\"Saving user credentials for registration test case\")\n</code></pre> <p>Example of logging in a test function:</p> <pre><code>def test_log(module_log: logging.Logger):\n    module_log.info(\"DUT serial number logged\")\n    assert True\n</code></pre>"},{"location":"examples/logging/#configuration","title":"Configuration","text":"<p>To configure logging parameters, add these settings to your <code>pytest.ini</code> file:</p> <pre><code>[pytest]\nlog_cli = true\nlog_cli_level = INFO\nlog_cli_format = %(asctime)s [%(levelname)s] %(message)s\nlog_cli_date_format = %H:%M:%S\n</code></pre> <p>You can find the description in How to manage logging</p>"},{"location":"examples/logging/#explanation-of-configuration-options","title":"Explanation of configuration options","text":"<ul> <li><code>log_cli = true</code>: Enables logging output during test execution</li> <li><code>log_cli_level = INFO</code>: Sets the minimum logging level to display</li> <li><code>log_cli_format</code>: Defines the format of log messages:</li> <li><code>%(asctime)s</code>: Timestamp</li> <li><code>[%(levelname)s]</code>: Log level (INFO, WARNING, etc.)</li> <li><code>%(message)s</code>: The actual log message</li> <li><code>log_cli_date_format = %H:%M:%S</code>: Sets the timestamp format to hours:minutes:seconds</li> </ul>"},{"location":"examples/minute_parity/","title":"Minute parity","text":"<p>This is an example of using pytest-hardpy functions, storing the result to CouchDB and writing a simple driver. The code for this example can be seen inside the hardpy package Minute parity.</p>"},{"location":"examples/minute_parity/#how-to-start","title":"how to start","text":"<ol> <li>Launch <code>hardpy init minute_parity</code>.</li> <li>Launch CouchDH instance.</li> <li>Modify the files described below.</li> <li>Launch <code>hardpy run minute_parity</code>.</li> </ol>"},{"location":"examples/minute_parity/#conftestpy","title":"conftest.py","text":"<p>Contains settings and fixtures for all tests:</p> <ul> <li>The function of generating a report and recording it in the database <code>finish_executing</code>;</li> <li>The example of devices used as a fixture in <code>driver_example</code>;</li> <li>The list of actions that will be performed after testing is filled in function <code>fill_actions_after_test</code>;</li> </ul> <pre><code>import pytest\nfrom driver_example import DriverExample\nfrom hardpy import (\n    CouchdbConfig,\n    CouchdbLoader,\n    get_current_report,\n)\n\n@pytest.fixture(scope=\"session\")\ndef driver_example():\n    example = DriverExample()\n    yield example\n    example.random_method()\n\ndef finish_executing():\n    report = get_current_report()\n    if report:\n        loader = CouchdbLoader(CouchdbConfig())\n        loader.load(report)\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef fill_actions_after_test(post_run_functions: list):\n    post_run_functions.append(finish_executing)\n    yield\n</code></pre>"},{"location":"examples/minute_parity/#driver_examplepy","title":"driver_example.py","text":"<p>An example of writing a simple device driver. The driver returns the current minute in the OS.</p> <pre><code>import datetime\nfrom hardpy import set_operator_message\n\nclass DriverExample:\n    @property\n    def current_minute(self):\n        current_time = datetime.datetime.now()\n        return int(current_time.strftime(\"%M\"))\n\n    def random_method(self):\n        pass\n</code></pre>"},{"location":"examples/minute_parity/#test_1py","title":"test_1.py","text":"<p>Contains tests related to preparation for the testing process:</p> <ul> <li>The name of the test module for the web interface is set to <code>pytest.mark.module_name</code>;</li> <li>The name of the test cases for the web interface is set to <code>pytest.mark.case_name</code>;</li> <li>The device under test (DUT) info is stored in the database in <code>test_dut_info</code>;</li> <li>The test stand info is store in the database in <code>test_stand_info</code>;</li> </ul> <pre><code>from uuid import uuid4\nimport pytest\nimport hardpy\n\npytestmark = pytest.mark.module_name(\"Testing preparation\")\n\n@pytest.mark.case_name(\"DUT info\")\ndef test_dut_info():\n    serial_number = str(uuid4())[:6]\n    hardpy.set_dut_serial_number(serial_number)\n    hardpy.set_dut_part_number(\"part_number_1\")\n    info = {\"batch\": \"test_batch\", \"board_rev\": \"rev_1\"}\n    hardpy.set_dut_info(info)\n    assert True\n\n@pytest.mark.case_name(\"Test stand info\")\ndef test_stand_info():\n    test_stand_name = \"Stand 1\"\n    hardpy.set_stand_name(test_stand_name)\n    hardpy.set_stand_location(\"Moon\")\n    hardpy.set_stand_number(2)\n    info = {\n        \"some_info\": \"123\",\n        \"release\": \"1.0.0\"\n    }\n    hardpy.set_stand_info(info)\n    assert True\n</code></pre>"},{"location":"examples/minute_parity/#test_2py","title":"test_2.py","text":"<p>Contains basic tests:</p> <ul> <li>The name of the test module for the web interface is set to <code>pytest.mark.module_name</code>;</li> <li>The name of the test cases for the web interface is set to <code>pytest.mark.case_name</code>;</li> <li>An example of using a driver to get the current minute in <code>test_minute_parity</code>;</li> <li>An example of saving a test case artifact to the database using <code>set_case_artifact</code>;</li> </ul> <pre><code>import pytest\nfrom driver_example import DriverExample\nimport hardpy\n\npytestmark = pytest.mark.module_name(\"Main tests\")\n\n@pytest.mark.case_name(\"Minute check\")\ndef test_minute_parity(driver_example: DriverExample):\n    minute = driver_example.current_minute\n    hardpy.set_message(f\"Current minute {minute}\")\n    result = minute % 2\n    data = {\"minute\": minute}\n    hardpy.set_case_artifact(data)\n    assert result == 0, f\"The test failed because {minute} is odd! Try again!\"\n</code></pre>"},{"location":"examples/minute_parity/#test_3py","title":"test_3.py","text":"<p>Contains the final tests of the testing process:</p> <ul> <li>The name of the test module for the web interface is set to <code>pytest.mark.module_name</code>;</li> <li>The name of the test cases for the web interface is set to <code>pytest.mark.case_name</code>;</li> <li>An example of setting and updating a message for a web interface using <code>set_message</code>;</li> <li><code>test_3</code> depends on <code>test_minute_parity</code> from <code>test_2</code>. Dependency is set to <code>pytest.mark.dependency</code>. If <code>test_2::test_minute_parity</code> fails, <code>test_3</code> will be skipped</li> </ul> <pre><code>from time import sleep\nimport pytest\nimport hardpy\n\npytestmark = [\n    pytest.mark.module_name(\"End of testing\"),\n    pytest.mark.dependency(\"test_2::test_minute_parity\"),\n]\n\n@pytest.mark.case_name(\"Final case\")\ndef test_one():\n    for i in range(5, 0, -1):\n        hardpy.set_message(f\"Time left until testing ends {i} s\", \"updated_status\")\n        sleep(1)\n    hardpy.set_message(\"Testing ended\", \"updated_status\")\n    assert True\n</code></pre>"},{"location":"examples/multiple_stands/","title":"Multiple stands","text":"<p>This is an example of running multiple stands on one PC.</p> <p>The example implements the launch of two stands and three CouchDB Instances.</p> <p>Each stand will record reports on the conducted testing in the CouchDB Instance assigned to it in the runstore and statestore databases. The third CouchDB Instance is needed to store reports in the report database on each conducted test of each stand.</p> <p>You can learn more about storing reports here Couchdb instance.</p>"},{"location":"examples/multiple_stands/#projects","title":"projects","text":"<ul> <li>Create 2 separate projects.</li> </ul> <pre><code>hardpy init tests_1\n</code></pre> <pre><code>hardpy init tests_2 --database-port 5985 --frontend-port 8001\n</code></pre>"},{"location":"examples/multiple_stands/#databases","title":"databases","text":"<p>For the third database, you can use <code>hardpy init</code> and delete all files except the database folder and the <code>docker-compose.yaml</code> file.</p> <pre><code>hardpy init third_database --database-port 5986\n</code></pre>"},{"location":"examples/multiple_stands/#conftestpy","title":"conftest.py","text":"<p>Modify <code>conftest.py</code> file in each project. Contains settings and fixtures for all tests:</p> <ul> <li>The function of generating a report and recording it in the database <code>save_report_to_couchdb</code>;</li> <li>The list of actions that will be performed after testing is filled in function <code>fill_actions_after_test</code>;</li> </ul> <p>To store reports from all booths in the third CouchDB Instance, specify the port numbers of this CouchDB Instance in the file <code>conftest.py</code> in the folder of each stand.</p> <pre><code>import pytest\nfrom hardpy import (\n    CouchdbLoader,\n    CouchdbConfig,\n    get_current_report,\n)\n\ndef save_report_to_couchdb():\n    report = get_current_report()\n    if report:\n        loader = CouchdbLoader(CouchdbConfig(port=5986))\n        loader.load(report)\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef fill_actions_after_test(post_run_functions: list):\n    post_run_functions.append(save_report_to_couchdb)\n    yield\n</code></pre> <ul> <li><code>5986</code> - port of the database with reports</li> </ul>"},{"location":"examples/multiple_stands/#how-to-start","title":"how to start","text":"<ol> <li>Start all databases via docker compose.</li> <li>Launch both project via <code>hardpy run &lt;project_name&gt;</code>.</li> </ol>"},{"location":"examples/operator_msg/","title":"Operator message","text":"<p>The set_operator_message function is intended for sending messages to the operator. Operator messages can be used before, after, and during tests.</p> <p>set_operator_message can be used in conjunction with images and html pages. To do this, the user can set the argument <code>image</code> with the ImageComponent class  and the argument <code>html</code> with the HTMLComponent class.</p> <p>The default message to the operator blocks further execution of the code, but the user can set the argument <code>block=False</code> and the function will display the message and continue execution of the test. In this case, the user can clear the operator message with the clear_operator_message function.</p> <p>The clear_operator_message is intended for clearing current operator message.</p>"},{"location":"examples/operator_msg/#how-to-start","title":"how to start","text":"<ol> <li>Launch CouchDH instance.</li> <li>Create a directory <code>&lt;dir_name&gt;</code> with the files described below.</li> <li>Launch <code>hardpy run &lt;dir_name&gt;</code>.</li> </ol>"},{"location":"examples/operator_msg/#conftestpy","title":"conftest.py","text":"<p>Contains settings and fixtures for all tests:</p> <ul> <li>The <code>finish_executing</code> function generates a report and saves it to the database;</li> <li>The <code>test_end_message</code> function shows message about completing of testing;</li> <li>The <code>fill_list_functions_after_test</code> function populates a list of actions to be performed post-test. You may rename this function as you want;</li> </ul> <p>If the report database doesn't exist, the report won't be saved, and an error message will be displayed to the operator. Otherwise, a success message will be shown indicating successful report saving.</p> <pre><code>import pytest\nfrom hardpy import CouchdbConfig, CouchdbLoader, get_current_report, set_operator_message\n\ndef finish_executing():\n    report = get_current_report()\n    try:\n        if report:\n            loader = CouchdbLoader(CouchdbConfig(port=5986))\n            loader.load(report)\n            set_operator_message(msg=\"Saving report was successful\", title=\"Operator message\")\n    except RuntimeError as e:\n        set_operator_message(msg='The report was not recorded with error: \"' + str(e) + '\"', title=\"Operator message\")\n\ndef test_end_message():\n    set_operator_message(msg=\"Testing completed\", title=\"Operator message\")\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef fill_list_functions_after_test(post_run_functions: list):\n    post_run_functions.append(test_end_message)\n    post_run_functions.append(finish_executing)\n    yield\n</code></pre>"},{"location":"examples/operator_msg/#test_1py","title":"test_1.py","text":"<p>Contains examples of how to use operator messages.</p> <pre><code>from time import sleep\nfrom hardpy import clear_operator_message, set_message, set_operator_message\n\ndef test_block_operator_message():\n    set_operator_message(msg=\"Test blocking operator message\", title=\"Operator message\")\n    for i in range(3, 0, -1):\n        set_message(f\"Time left to complete test case {i} s\", \"updated_status\")\n        sleep(1)\n    set_message(\"Test case finished\", \"updated_status\")\n    assert True\n\ndef test_not_block_operator_message():\n    set_operator_message(msg=\"Test not blocking operator message\", title=\"Operator message\", block=False, font_size=18)\n    for i in range(3, 0, -1):\n        set_message(f\"Time left to complete test case {i} s\", \"updated_status\")\n        sleep(1)\n    set_message(\"Test case finished\", \"updated_status\")\n    sleep(2)\n    assert True\n\ndef test_clear_operator_message():\n    set_operator_message(msg=\"Test clearing operator message\", title=\"Operator message\", block=False)\n    for i in range(3, 0, -1):\n        set_message(f\"Time left to complete test case {i} s\", \"updated_status\")\n        sleep(1)\n    clear_operator_message()\n    set_message(\"Test case finished\", \"updated_status\")\n    sleep(2)\n    assert True\n</code></pre>"},{"location":"examples/operator_msg/#test_2py","title":"test_2.py","text":"<pre><code>from time import sleep\nfrom hardpy import ImageComponent, clear_operator_message, set_message, set_operator_message\n\ndef test_block_operator_message():\n    set_operator_message(\n        msg=\"Test blocking operator message\",\n        title=\"Operator message\",\n        image=ImageComponent(address=\"assets/test.png\", width=100),\n    )\n    for i in range(3, 0, -1):\n        set_message(f\"Time left to complete test case {i} s\", \"updated_status\")\n        sleep(1)\n    set_message(\"Test case finished\", \"updated_status\")\n    assert True\n\ndef test_not_block_operator_message():\n    set_operator_message(\n        msg=\"Test not blocking operator message\",\n        title=\"Operator message\",\n        image=ImageComponent(address=\"assets/test.png\", width=100),\n        block=False,\n    )\n    for i in range(3, 0, -1):\n        set_message(f\"Time left to complete test case {i} s\", \"updated_status\")\n        sleep(1)\n    set_message(\"Test case finished\", \"updated_status\")\n    sleep(2)\n    assert True\n\ndef test_clear_operator_message():\n    set_operator_message(\n        msg=\"Test clearing operator message\",\n        title=\"Operator message\",\n        image=ImageComponent(address=\"assets/test.png\", width=100),\n        block=False,\n    )\n    for i in range(3, 0, -1):\n        set_message(f\"Time left to complete test case {i} s\", \"updated_status\")\n        sleep(1)\n    clear_operator_message()\n    set_message(\"Test case finished\", \"updated_status\")\n    sleep(2)\n    assert True\n</code></pre>"},{"location":"examples/operator_msg/#test_3py","title":"test_3.py","text":"<pre><code>from time import sleep\nfrom hardpy import HTMLComponent, set_message, set_operator_message\n\ntest_html = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;Test HTML Page&lt;/h1&gt;\n\n&lt;p&gt;It is testing page.&lt;/p&gt;\n&lt;p&gt;You can put anything on it.&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\ndef test_operator_message_with_html():\n    set_operator_message(\n        msg=\"Test operator message with html\",\n        title=\"Operator message\",\n        html=HTMLComponent(html=test_html, is_raw_html=True),\n    )\n    for i in range(3, 0, -1):\n        set_message(f\"Time left to complete test case {i} s\", \"updated_status\")\n        sleep(1)\n    set_message(\"Test case finished\", \"updated_status\")\n    assert True\n\ndef test_operator_message_with_html_and_border():\n    set_operator_message(\n        msg=\"Test operator message with html\",\n        title=\"Operator message\",\n        html=HTMLComponent(html=test_html, is_raw_html=True, border=10, width=20),\n    )\n    for i in range(3, 0, -1):\n        set_message(f\"Time left to complete test case {i} s\", \"updated_status\")\n        sleep(1)\n    set_message(\"Test case finished\", \"updated_status\")\n    assert True\n</code></pre>"},{"location":"examples/skip_test/","title":"Skip test","text":"<p>This is an example of using the pytest-hardpy functions with a test dependency on another test and skipping tests.</p>"},{"location":"examples/skip_test/#how-to-start","title":"how to start","text":"<ol> <li>Launch <code>hardpy init skip_test</code>.</li> <li>Launch CouchDH instance.</li> <li>Modify the files described below.</li> <li>Launch <code>hardpy run skip_test</code>.</li> </ol>"},{"location":"examples/skip_test/#description","title":"description","text":"<p>If a test case/module that a test case/module depends on fails, errors or is skipped, the dependent test case/module will also be skipped. A module is considered passed only if all module tests passed. If these dependencies are incorrect, the tests will not run.</p> <p>To use:</p> <ul> <li>Add the line <code>@pytest.mark.dependency()</code> before independent tests.</li> <li>Add the line <code>@pytest.mark.dependency(test_1::test_a)</code> before the dependent test, if a test that a test depends on is in the same file.</li> <li>Add the line <code>@pytest.mark.dependency(test_1)</code> before the dependent test, if the test depends on the module.</li> </ul> <p>Test/module name formats:</p> <ul> <li><code>test_1</code> - if depends on the test module</li> <li><code>test_1::test_a</code> - if depends on the test case</li> </ul>"},{"location":"examples/skip_test/#case-by-case-dependence","title":"case by case dependence","text":"<pre><code>import pytest\n\ndef test_a():\n    assert False\n\n@pytest.mark.dependency(\"test_1::test_a\")\ndef test_b():\n    assert False\n</code></pre> <p><code>test_a</code> is marked as a dependency for <code>test_b</code> using <code>@pytest.mark.dependency(\"test_1::test_a\")</code>. If <code>test_a</code>, then <code>test_b</code> will be skipped.</p>"},{"location":"examples/skip_test/#module-by-module-dependence","title":"module by module dependence","text":""},{"location":"examples/skip_test/#test_1py","title":"test_1.py","text":"<pre><code>def test_a():\n    assert False\n</code></pre>"},{"location":"examples/skip_test/#test_2py","title":"test_2.py","text":"<pre><code>import pytest\n\npytestmark = pytest.mark.dependency(\"test_1\")\n\ndef test_a():\n    assert True\n</code></pre> <p>Module <code>test_2</code> depends on module <code>test_1</code>. If an error occurs in module <code>test_1</code>, all tests in module <code>test_2</code> will be skipped.</p>"},{"location":"examples/skip_test/#multiple-test-dependencies-example","title":"multiple test dependencies example","text":"<p>You can specify multiple dependencies for a single test or module. The test will only run if ALL specified dependencies are successful. If any dependency fails, the test will be skipped.</p> <pre><code>import pytest\n\ndef test_a():\n    assert True\n\ndef test_b():\n    assert False\n\n@pytest.mark.dependency(\"test_1::test_a\")\n@pytest.mark.dependency(\"test_1::test_b\")\ndef test_c():\n    assert True\n</code></pre> <p>In this case, <code>test_c</code> depends on two other tests. Since <code>test_b</code> fails, <code>test_c</code> will be skipped.</p>"},{"location":"examples/skip_test/#multiple-module-dependencies-example","title":"multiple module dependencies example","text":""},{"location":"examples/skip_test/#test_1py_1","title":"test_1.py","text":"<pre><code>def test_a():\n    assert True\n</code></pre>"},{"location":"examples/skip_test/#test_2py_1","title":"test_2.py","text":"<pre><code>def test_b():\n    assert False\n</code></pre>"},{"location":"examples/skip_test/#test_3py","title":"test_3.py","text":"<pre><code>import pytest\n\npytestmark = [\n    pytest.mark.dependency(\"test_1\"),\n    pytest.mark.dependency(\"test_2\"),\n]\n\ndef test_c():\n    assert True\n</code></pre> <p>Here, the entire <code>test_3</code> module depends on both <code>test_1</code> and <code>test_2</code> modules. Since <code>test_2</code> fails, all tests in <code>test_3</code> will be skipped.</p>"},{"location":"examples/skip_test/#incorrect-dependency-names","title":"incorrect dependency names","text":""},{"location":"examples/skip_test/#test_1py_2","title":"test_1.py","text":"<pre><code>import pytest\n\ndef test_a():\n    assert True\n\n@pytest.mark.dependency(\"test_1::a\")\ndef test_b():\n    assert True\n</code></pre> <p>In this case, the test <code>test_b</code> has no dependencies because the  <code>test_1::a</code> dependency is incorrect.</p>"},{"location":"examples/stand_cloud/","title":"StandCloud","text":"<p>This is an example of using pytest-hardpy functions, storing the result to StandCloud. This example is similar to Minute parity, but the test results are stored in StandCloud instead of CouchDB. The code for this example can be seen inside the hardpy package StandCloud.</p>"},{"location":"examples/stand_cloud/#how-to-start","title":"how to start","text":"<ol> <li>Get your own StandCloud service address by contacting info@everypin.io, e.g. <code>demo.standcloud.localhost</code>.</li> <li>Launch <code>hardpy init stand_cloud --sc-address demo.standcloud.localhost --sc-connection-only</code>.</li> <li>Launch CouchDH instance.</li> <li>Modify the files described below.</li> <li>You can remove <code>connection_only = true</code> if you don't want to check the     StandCloud connection before each HardPy start.</li> <li> <p>Login in the StandCloud:</p> <pre><code>hardpy sc-login demo.standcloud.localhost\n</code></pre> <p>The duration of the authorization is defined in the StandCloud service itself. Registration must be completed once, then you can check authorization using the command:</p> <pre><code>hardpy sc-login --check demo.standcloud.localhost\n</code></pre> <p>Learn more in the StandCloud section.</p> </li> <li> <p>Launch <code>hardpy run stand_cloud</code>.</p> </li> </ol>"},{"location":"examples/stand_cloud/#conftestpy","title":"conftest.py","text":"<p>Contains settings and fixtures for all tests:</p> <ul> <li>The function to generate a report and record it in the StandCloud <code>finish_executing</code>;</li> <li>The example of devices used as a fixture in <code>driver_example</code>;</li> <li>The list of actions that will be performed after testing is filled in function <code>fill_actions_after_test</code>;</li> </ul> <pre><code>from http import HTTPStatus\n\nimport pytest\nfrom driver_example import DriverExample\n\nfrom hardpy import (\n    StandCloudError,\n    StandCloudLoader,\n    get_current_report,\n    set_operator_message,\n)\n\n@pytest.fixture(scope=\"session\")\ndef driver_example():\n    example = DriverExample()\n    yield example\n\ndef finish_executing():\n    report = get_current_report()\n    if report:\n        try:\n            loader = StandCloudLoader()\n            response = loader.load(report)\n            if response.status_code != HTTPStatus.CREATED:\n                set_operator_message(\n                    \"Report not uploaded to StandCloud, \"\n                    f\"status code: {response.status_code}, text: {response.text}\",\n                )\n        except StandCloudError as exc:\n            set_operator_message(f\"{exc}\")\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef fill_actions_after_test(post_run_functions: list):\n    post_run_functions.append(finish_executing)\n    yield\n</code></pre>"},{"location":"examples/stand_cloud/#driver_examplepy","title":"driver_example.py","text":"<p>An example of writing a simple device driver. The driver returns the current minute in the OS.</p> <pre><code>import datetime\n\nclass DriverExample:\n    @property\n    def current_minute(self):\n        current_time = datetime.datetime.now()\n        return int(current_time.strftime(\"%M\"))\n</code></pre>"},{"location":"examples/stand_cloud/#test_1py","title":"test_1.py","text":"<p>Contains tests related to preparation for the testing process:</p> <ul> <li>The name of the test module for the web interface is set to <code>pytest.mark.module_name</code>;</li> <li>The name of the test cases for the web interface is set to <code>pytest.mark.case_name</code>;</li> <li>The device under test (DUT) info is stored in the database in <code>test_dut_info</code>;</li> <li>The test stand info is store in the database in <code>test_stand_info</code>;</li> </ul> <pre><code>from uuid import uuid4\nimport pytest\nimport hardpy\n\npytestmark = pytest.mark.module_name(\"Testing preparation\")\n\n@pytest.mark.case_name(\"DUT info\")\ndef test_dut_info():\n    serial_number = str(uuid4())[:6]\n    hardpy.set_dut_serial_number(serial_number)\n    hardpy.set_dut_part_number(\"part_number_1\")\n    info = {\"batch\": \"test_batch\", \"board_rev\": \"rev_1\"}\n    hardpy.set_dut_info(info)\n    assert True\n\n@pytest.mark.case_name(\"Test stand info\")\ndef test_stand_info():\n    test_stand_name = \"Stand 1\"\n    hardpy.set_stand_name(test_stand_name)\n    hardpy.set_stand_location(\"Moon\")\n    hardpy.set_stand_number(3)\n    info = {\"some_info\": \"123\"}\n    hardpy.set_stand_info(info)\n    assert True\n</code></pre>"},{"location":"examples/stand_cloud/#test_2py","title":"test_2.py","text":"<p>Contains basic tests:</p> <ul> <li>The name of the test module for the web interface is set to <code>pytest.mark.module_name</code>;</li> <li>The name of the test cases for the web interface is set to <code>pytest.mark.case_name</code>;</li> <li>An example of using a driver to get the current minute in <code>test_minute_parity</code>;</li> <li>An example of saving a test case artifact to the database using <code>set_case_artifact</code>;</li> </ul> <pre><code>import pytest\nfrom driver_example import DriverExample\nimport hardpy\n\npytestmark = pytest.mark.module_name(\"Main tests\")\n\n@pytest.mark.case_name(\"Minute check\")\ndef test_minute_parity(driver_example: DriverExample):\n    minute = driver_example.current_minute\n    hardpy.set_message(f\"Current minute {minute}\")\n    result = minute % 2\n    data = {\"minute\": minute}\n    hardpy.set_case_artifact(data)\n    assert result == 0, f\"The test failed because {minute} is odd! Try again!\"\n</code></pre>"},{"location":"examples/stand_cloud/#test_3py","title":"test_3.py","text":"<p>Contains the final tests of the testing process:</p> <ul> <li>The name of the test module for the web interface is set to <code>pytest.mark.module_name</code>;</li> <li>The name of the test cases for the web interface is set to <code>pytest.mark.case_name</code>;</li> <li>An example of setting and updating a message for a web interface using <code>set_message</code>;</li> <li><code>test_3</code> depends on <code>test_minute_parity</code> from <code>test_2</code>. Dependency is set to <code>pytest.mark.dependency</code>. If <code>test_2::test_minute_parity</code> fails, <code>test_3</code> will be skipped</li> </ul> <pre><code>from time import sleep\nimport pytest\nimport hardpy\n\npytestmark = [\n    pytest.mark.module_name(\"End of testing\"),\n    pytest.mark.dependency(\"test_2::test_minute_parity\"),\n]\n\n@pytest.mark.case_name(\"Final case\")\ndef test_one():\n    for i in range(5, 0, -1):\n        hardpy.set_message(f\"Time left until testing ends {i} s\", \"updated_status\")\n        sleep(1)\n    hardpy.set_message(\"Testing ended\", \"updated_status\")\n    assert True\n</code></pre>"},{"location":"examples/stand_cloud_reader/","title":"StandCloud reader","text":"<p>HardPy allows you to read test data from the StandCloud. For this purpose, the StandCloudReader class is available in HardPy, which provides access to the REST API of the StandCloud service. To read data from the StandCloud, the user must log in to the StandCloud using the hardpy sc-login.</p> <p>To view the REST API documentation, the user can navigate to the format page https://service_name/integration/api/v1/docs, where <code>service_name</code> is the address of the StandCloud client.</p> <p>Example of documentation page address: https://demo.standcloud.io/integration/api/v1/docs</p> <p>To access StandCloud, contact info@everypin.io.</p>"},{"location":"examples/stand_cloud_reader/#functions","title":"Functions","text":""},{"location":"examples/stand_cloud_reader/#test_run","title":"test_run","text":"<p>Provides access to 2 endpoints: <code>/test_run/{test_run_id}</code> and <code>/test_run</code>. This function does not allow two arguments to be used at the same time. The argument must be either <code>run_id</code> or the filter <code>params</code>.</p> <p>run_id</p> <p>Allows the user to retrieve data about a specific test run by its id from <code>/test_run</code> URL. User can get id from StandCloudLoader.load() function.</p> <p>Example:</p> <pre><code>import hardpy\n\nsc_connector = hardpy.StandCloudConnector(addr=\"demo.standcloud.io\")\nreader = hardpy.StandCloudReader(sc_connector)\n\nresponse = reader.test_run(run_id=\"0196434d-e8f7-7ce1-81f7-e16f20487494\")\nprint(response.json())\n</code></pre> <p>Request URL of this example:</p> <pre><code>https://demo.standcloud.io/hardpy/api/v1/test_run/0196434d-e8f7-7ce1-81f7-e16f20487494\n</code></pre> <p>REST API documentation page of this example:</p> <pre><code>https://demo.standcloud.io/integration/api/v1/docs\n</code></pre> <p>Response data example:</p> <pre><code>{\n  \"test_run_id\": \"0196434d-e8f7-7ce1-81f7-e16f20487494\",\n  \"test_plan_name\": \"Test Plan A\",\n  \"serial_number\": \"SN-98765\",\n  \"part_number\": \"PN-54321AB\",\n  \"status\": \"FAIL\",\n  \"status_icon\": \"\u274c\",\n  \"number_of_attempt\": 1,\n  \"start_time\": \"2024-02-20T14:23:45Z\",\n  \"stop_time\": \"2024-02-20T14:23:45Z\",\n  \"duration\": \"00:12:34\",\n  \"test_stand_name\": \"EMC Chamber #2\",\n  \"test_stand_hw_id\": \"TS-CH45\",\n  \"test_run_artifact\": {\n    \"test_run_parameter\": \"test_run_value\"\n  },\n  \"test_stand_info\": {\n    \"calibration_date\": \"2025-01-15\"\n  },\n  \"dut_info\": {\n    \"manufacturer\": \"ABC Corp\"\n  }\n}\n</code></pre> <p>params</p> <p>Allows the user to retrieve data about a test run by filters from <code>/test_run</code> URL. Filters are specified as parameters. A special place is occupied by the filter by field <code>dut.info</code>, which allows to add fields <code>dut.info</code> as keys for the filter in the parameters.</p> <p>The difference between the test run with filters and the tested DUT is described in the StandCloudReader documentation.</p> <p>Example:</p> <pre><code>import hardpy\n\nsc_connector = hardpy.StandCloudConnector(addr=\"demo.standcloud.io\")\nreader = hardpy.StandCloudReader(sc_connector)\n\nparam = {\n    \"part_number\": \"PN-54321AB\",\n    \"status\": \"pass\",\n    \"manufacturer\": \"ABC_Corp\",\n    \"number_of_attempt\": 2,\n}\nresponse = reader.test_run(params=param)\nprint(response.json())\n</code></pre> <p>Request URL of this example:</p> <pre><code>https://demo.standcloud.io/hardpy/api/v1/test_run?part_number=PN-54321AB&amp;status=pass&amp;manufacturer=ABC_Corp&amp;number_of_attempt=2\n</code></pre> <p>REST API documentation page of this example:</p> <pre><code>https://demo.standcloud.io/integration/api/v1/docs\n</code></pre> <p>Response data example:</p> <pre><code>{\n  \"test_run_id\": \"0196434d-e8f7-7ce1-81f7-e16f20487494\",\n  \"test_plan_name\": \"Test Plan A\",\n  \"serial_number\": \"SN-98765\",\n  \"part_number\": \"PN-54321AB\",\n  \"status\": \"FAIL\",\n  \"status_icon\": \"\u274c\",\n  \"number_of_attempt\": 1,\n  \"start_time\": \"2024-02-20T14:23:45Z\",\n  \"stop_time\": \"2024-02-20T14:23:45Z\",\n  \"duration\": \"00:12:34\",\n  \"test_stand_name\": \"EMC Chamber #2\",\n  \"test_stand_hw_id\": \"TS-CH45\",\n  \"test_run_artifact\": {\n    \"test_run_parameter\": \"test_run_value\"\n  },\n  \"test_stand_info\": {\n    \"calibration_date\": \"2025-01-15\"\n  },\n  \"dut_info\": {\n    \"serial_number\": \"SN-98765\",\n    \"part_number\": \"PN-54321AB\",\n    \"info\": {\n      \"manufacturer\": \"ABC Corp\"\n    }\n  }\n}\n</code></pre>"},{"location":"examples/stand_cloud_reader/#tested_dut","title":"tested_dut","text":"<p>Allows the user to retrieve data about the last tested dut's by filters from <code>/tested_dut</code> URL. Filters are specified as parameters. A special place is occupied by the filter by field <code>dut.info</code>, which allows to add fields <code>dut.info</code> as keys for the filter in the parameters.</p> <p>The difference between the test run with filters and the tested DUT is described in the StandCloudReader documentation.</p> <p>Example:</p> <pre><code>import hardpy\n\nsc_connector = hardpy.StandCloudConnector(addr=\"demo.standcloud.io\")\nreader = hardpy.StandCloudReader(sc_connector)\n\nparam = {\n    \"part_number\": \"PN-54321AB\",\n    \"status\": \"pass\",\n    \"manufacturer\": \"ABC_Corp\",\n    \"attempt_count\": 3,\n}\nresponse = reader.tested_dut(param)\nprint(response.json())\n</code></pre> <p>Request URL of this example:</p> <pre><code>https://demo.standcloud.io/hardpy/api/v1/tested_dut?part_number=PN-54321AB&amp;status=pass&amp;manufacturer=ABC_Corp&amp;attempt_count=3\n</code></pre> <p>REST API documentation page of this example:</p> <pre><code>https://demo.standcloud.io/integration/api/v1/docs\n</code></pre> <p>Response data example:</p> <pre><code>[\n  {\n    \"test_plan_name\": \"Test run #A\",\n    \"serial_number\": \"SN-12345\",\n    \"part_number\": \"PN-54321AB\",\n    \"status\": \"pass\",\n    \"status_icon\": \"\u2705\",\n    \"attempt_count\": 1,\n    \"start_time\": \"2025-03-28T09:34:05Z\",\n    \"finish_time\": \"2025-03-28T09:34:55Z\",\n    \"duration\": \"PT50S\",\n    \"test_stand_name\": \"EMC Chamber #2\",\n    \"test_stand_hw_id\": \"TS-CH45\",\n    \"dut_info\": {\n      \"manufacturer\": \"ABC_Corp\"\n    },\n    \"test_stand_info\": {\n      \"calibration_date\": \"2025-01-15\"\n    },\n    \"test_run_artifact\": {\n      \"test_run_parameter\": \"test_run_value\"\n    }\n  },\n  {\n    \"test_plan_name\": \"Test run #B\",\n    \"serial_number\": \"SN-98766\",\n    \"part_number\": \"PN-54321AB\",\n    \"status\": \"pass\",\n    \"status_icon\": \"\u2705\",\n    \"attempt_count\": 1,\n    \"start_time\": \"2025-03-28T09:35:05Z\",\n    \"finish_time\": \"2025-03-28T09:35:55Z\",\n    \"duration\": \"PT50S\",\n    \"test_stand_name\": \"EMC Chamber #2\",\n    \"test_stand_hw_id\": \"TS-CH45\",\n    \"dut_info\": {\n      \"manufacturer\": \"ABC_Corp\"\n    },\n    \"test_stand_info\": {\n      \"calibration_date\": \"2025-01-15\"\n    },\n    \"test_run_artifact\": {\n      \"test_run_parameter\": \"test_run_value\"\n    }\n  }\n]\n</code></pre>"},{"location":"examples/stand_cloud_thirdparty_auth/","title":"StandCloud third party authorization","text":"<p>This documentation describes how to authorize a HardPy application on a StandCloud system using the OAuth 2.0 Device Authorization Flow process.</p>"},{"location":"examples/stand_cloud_thirdparty_auth/#authorization-process","title":"Authorization process","text":"<ol> <li>The application requests the device code from the authorization server.</li> <li>The server returns:<ul> <li><code>device_code</code></li> <li><code>user_code</code></li> <li><code>verification_uri</code> (authorization URL)</li> <li><code>verification_uri_complete</code> (the URL with the pre-filled code)</li> <li><code>expires_in</code> (code lifetime)</li> <li><code>interval</code> (status polling interval)</li> </ul> </li> <li>The user follows the link and confirms authorization.</li> <li>The application periodically polls the token server.</li> <li>After confirmation, the server returns an access token and a refresh token.</li> </ol>"},{"location":"examples/stand_cloud_thirdparty_auth/#code-example","title":"Code example","text":"<p>The code samples are in Python, but they use simple constructs that are available in most programming languages. To implement the authorization process for a third-party application in a different language, use the general approach demonstrated in these scripts. Reading RFC6749, which describes the OAuth 2.0 device flow, is also recommended. The above examples do not display the QR code to the user; rather, they display a link for authorization.</p>"},{"location":"examples/stand_cloud_thirdparty_auth/#authorization-example","title":"Authorization example","text":"<p>auth_flow.py is an example of a simple authorization script written in Python. The script requires the installation of the <code>requests</code> package. The only thing that needs to be changed to make it work is the StandCloud address in the <code>BASE_URL</code> variable.</p> <pre><code># This script demonstrates the StandCloud authentication process.\n# Change the URL to your StandCloud address, nothing else needs to be changed.\n\nimport json\nimport sys\nimport time\n\nimport requests\n\n########################################\n# Change URL to your StandCloud address\nBASE_URL = \"https://demo.standcloud.io\"\n########################################\n\n# Confugirable parameters, False if the server is self-signed\nSSL_VERIFY = True\n\n# OAuth client configuration\n# client_id must be \"hardpy-report-uploader\"\nCLIENT_ID = \"hardpy-report-uploader\"\n\n# API endpoints\nAPI_URL = BASE_URL + \"/hardpy/api/v1\"\nDEVICE_AUTHORIZATION_URL = BASE_URL + \"/auth/api/oidc/device-authorization\"\nTOKEN_URL = BASE_URL + \"/auth/api/oidc/token\"\n\n\n# Device authorization aequest\ndata = {\n    \"client_id\": CLIENT_ID,\n    \"scope\": \"offline_access authelia.bearer.authz\",\n    \"audience\": API_URL,\n}\n\nreq = requests.post(DEVICE_AUTHORIZATION_URL, data=data, verify=SSL_VERIFY, timeout=10)\nresponse = json.loads(req.content)\nverification_uri_complete = response[\"verification_uri_complete\"]\ninterval = response[\"interval\"]\n\n# Token request\nif \"error\" in response:\n    error = response[\"error\"]\n    error_description = response[\"error_description\"]\n    print(f\"{error}: {error_description}\")\n    sys.exit(1)\n\nprint(f\"\\nVerification URI: {verification_uri_complete}\")\n\ndata = {\n    \"client_id\": CLIENT_ID,\n    \"grant_type\": \"urn:ietf:params:oauth:grant-type:device_code\",\n    \"device_code\": response[\"device_code\"],\n}\n\n# Token response\nwhile True:\n    req = requests.post(TOKEN_URL, data=data, verify=SSL_VERIFY, timeout=10)\n    response = json.loads(req.content)\n    print(\".\", end=\"\")\n    if \"access_token\" in response:\n        print(\"\\nToken info:\", response)\n        break\n    time.sleep(interval)\n\n# Test API call\nheader = {\n    \"Authorization\": \"Bearer {}\".format(response[\"access_token\"]),\n    \"Content-type\": \"application/json\",\n    \"Accept\": \"text/plain\",\n}\nprint(\"\\nheader: \", header)\n\nUSER_INFO_URL = API_URL + \"/healthcheck\"\nresponse = requests.get(USER_INFO_URL, headers=header, verify=SSL_VERIFY, timeout=10)\n\nif response.status_code != 200:\n    print(response.text)\n    sys.exit(1)\nprint(\"\\nOAuth Authenticated and Authorized API access\")\n</code></pre>"},{"location":"examples/stand_cloud_thirdparty_auth/#1-introduction","title":"1. Introduction","text":"<p>The script facilitates a secure way for devices with limited input capabilities (like command-line applications) to authenticate with StandCloud. It leverages the OAuth 2.0 Device Flow, which allows a user to authorize a device by visiting a URL on a separate, input-rich device (e.g., a web browser on a computer or smartphone).</p>"},{"location":"examples/stand_cloud_thirdparty_auth/#2-key-concepts-oauth-20-device-authorization-grant-flow","title":"2. Key concepts: OAuth 2.0 device authorization grant flow","text":"<p>The OAuth 2.0 Device Authorization Grant Flow is designed for devices that cannot easily display a browser or accept direct user input (like typing a username and password). The flow generally involves the following steps:</p> <ol> <li>Device Authorization Request: The client (this script) requests a device code and a    verification URI from the authorization server.</li> <li>User Interaction: The user takes the verification URI and a user code     (provided by the authorization server) and enters them into a browser on a     separate device to authorize the client.</li> <li>Token Request Polling: The client repeatedly polls the authorization server's     token endpoint with the device code until the user completes the authorization.</li> <li>Token Response: Once authorized, the client receives access tokens and (optionally) refresh tokens.</li> <li>API Access: The client uses the obtained access token to make authenticated calls to the protected API resources.</li> </ol> <p>For a deeper understanding of the OAuth 2.0 Device Authorization Grant, refer to the official specification: RFC 8628 - OAuth 2.0 Device Authorization Grant.</p>"},{"location":"examples/stand_cloud_thirdparty_auth/#3-script-breakdown","title":"3. Script breakdown","text":"<p>The script performs the following sequence of operations:</p>"},{"location":"examples/stand_cloud_thirdparty_auth/#31-configuration","title":"3.1. Configuration","text":"<ul> <li><code>BASE_URL</code>: This variable must be changed to your specific StandCloud instance URL.<ul> <li>Example: <code>https://company_name.standcloud.io</code></li> </ul> </li> <li><code>SSL_VERIFY</code>: A boolean flag (<code>True</code> by default) indicating whether SSL certificate verification should be performed.     Set to <code>False</code> if your server uses a self-signed certificate.</li> <li><code>CLIENT_ID</code>: The OAuth client identifier, which is fixed as <code>hardpy-report-uploader</code>.     This identifies the client application to the StandCloud authentication system.</li> </ul>"},{"location":"examples/stand_cloud_thirdparty_auth/#32-api-endpoints","title":"3.2. API endpoints","text":"<p>The script defines several critical API endpoints based on the <code>BASE_URL</code>:</p> <ul> <li><code>API_URL</code>: The base URL for the StandCloud API (<code>/hardpy/api/v1</code>).</li> <li><code>DEVICE_AUTHORIZATION_URL</code>: The endpoint for initiating the device authorization flow (<code>/auth/api/oidc/device-authorization</code>).</li> <li><code>TOKEN_URL</code>: The endpoint for requesting tokens after device authorization (<code>/auth/api/oidc/token</code>).</li> </ul>"},{"location":"examples/stand_cloud_thirdparty_auth/#33-device-authorization-request","title":"3.3. Device authorization request","text":"<p>The script first makes a <code>POST</code> request to the <code>DEVICE_AUTHORIZATION_URL</code> with the following parameters:</p> <ul> <li><code>client_id</code>: The <code>CLIENT_ID</code> defined above.</li> <li><code>scope</code>: Defines the permissions requested.<ul> <li><code>offline_access</code>: Allows the client to request refresh tokens,     enabling long-term access without re-authorization.</li> <li><code>authelia.bearer.authz</code>: A specific scope related to Authelia     (an open-source authentication and authorization server often used with OpenID Connect)     for bearer token authorization.</li> </ul> </li> <li><code>audience</code>: Specifies the intended recipient of the access token, which is the <code>API_URL</code>.</li> </ul> <p>Upon a successful response, the script extracts:</p> <ul> <li><code>verification_uri_complete</code>: The full URL the user needs to visit in their browser to authorize the device.</li> <li><code>interval</code>: The recommended polling interval (in seconds) for subsequent token requests.</li> <li><code>device_code</code>: A code representing the authorization request, used in subsequent token polling.</li> </ul> <p>The script then prints the <code>verification_uri_complete</code> for the user to access. It includes basic error handling for the device authorization request.</p>"},{"location":"examples/stand_cloud_thirdparty_auth/#34-token-request-polling","title":"3.4. Token request (polling)","text":"<p>After initiating the device authorization, the script enters a loop to poll the <code>TOKEN_URL</code> until authorization is granted by the user. Each <code>POST</code> request to the <code>TOKEN_URL</code> includes:</p> <ul> <li><code>client_id</code>: The <code>CLIENT_ID</code>.</li> <li><code>grant_type</code>: Set to <code>\"urn:ietf:params:oauth:grant-type:device_code\"</code>, indicating the Device Flow grant type.</li> <li><code>device_code</code>: The <code>device_code</code> obtained from the initial device authorization request.</li> </ul> <p>The script pauses for the <code>interval</code> period between each poll. Once the <code>access_token</code> is present in the response, the polling loop breaks, and the script proceeds.</p>"},{"location":"examples/stand_cloud_thirdparty_auth/#35-test-api-call","title":"3.5. Test API call","text":"<p>Finally, the script demonstrates how to use the obtained <code>access_token</code> to make an authenticated API call.</p> <ul> <li>An <code>Authorization</code> header is constructed with the format <code>\"Bearer &lt;access_token&gt;\"</code>.</li> <li>A <code>GET</code> request is made to the <code>API_URL</code> + <code>/healthcheck</code> endpoint.     This is a simple endpoint to verify successful authentication and authorization.</li> </ul> <p>If the API call returns a <code>200 OK</code> status, it confirms that the OAuth authentication and authorization process was successful, and the client can now access protected resources. Any other status code indicates an issue, and the response text is printed for debugging.</p>"},{"location":"examples/stand_cloud_thirdparty_auth/#4-replicating-in-other-languages","title":"4. Replicating in other languages","text":"<p>To implement this authentication flow in a different programming language, you will need to:</p> <ol> <li>HTTP Client Library: Use an HTTP client library available in your chosen language     (e.g., <code>requests</code> for Python, <code>HttpClient</code> for C#, <code>fetch</code> for JavaScript, <code>OkHttp</code> for Java, <code>net/http</code> for Go).</li> <li>JSON Parsing: Implement JSON parsing to handle the responses from the authorization and token endpoints.</li> <li>URL Construction: Construct the <code>DEVICE_AUTHORIZATION_URL</code>, <code>TOKEN_URL</code>, and <code>API_URL</code>     correctly based on your StandCloud instance.</li> <li>Request Parameters: Ensure that the <code>client_id</code>, <code>scope</code>, <code>audience</code>, <code>grant_type</code>,     and <code>device_code</code> parameters are correctly included in your <code>POST</code> request bodies, typically as form-urlencoded data.</li> <li>Polling Logic: Implement a polling mechanism with appropriate delays to wait for user authorization.</li> <li>Bearer Token: Correctly format the <code>Authorization: Bearer &lt;access_token&gt;</code> header for protected API calls.</li> </ol>"},{"location":"examples/stand_cloud_thirdparty_auth/#authorization-example-with-token-update","title":"Authorization example with token update","text":"<p>token_update.py is a more complex version of the auth_flow.py script, which rotates access and refresh tokens. This script stores these tokens in a file. However, this simplified token storage model should not be used in a production environment for security reasons. The only thing that needs to be changed to make it work is the StandCloud address in the <code>BASE_URL</code> variable.</p> <pre><code># This script demonstrates the StandCloud authentication process with\n# token updating. Don't use the save as file option, it's insecure.\n# Change the URL to your StandCloud address, nothing else needs to be changed.\n\nimport json\nimport sys\nimport time\nfrom pathlib import Path\n\nimport requests\n\n########################################\n# Change URL to your StandCloud address\nBASE_URL = \"https://demo.standcloud.io\"\n########################################\n\n# Configurable parameters, False if the server is self-signed\nSSL_VERIFY = True\n\n# OAuth client configuration\n# client_id must be \"hardpy-report-uploader\"\nCLIENT_ID = \"hardpy-report-uploader\"\n\n# API endpoints\nAPI_URL = BASE_URL + \"/hardpy/api/v1\"\nDEVICE_AUTHORIZATION_URL = BASE_URL + \"/auth/api/oidc/device-authorization\"\nTOKEN_URL = BASE_URL + \"/auth/api/oidc/token\"\nHEALTHCHECK_URL = API_URL + \"/healthcheck\"\nTOKEN_FILE = Path(__file__).parent / \"token_info.json\"\n\n\ndef authenticate():\n    data = {\n        \"client_id\": CLIENT_ID,\n        \"scope\": \"offline_access authelia.bearer.authz\",\n        \"audience\": API_URL,\n    }\n\n    req = requests.post(\n        DEVICE_AUTHORIZATION_URL, data=data, verify=SSL_VERIFY, timeout=10\n    )\n    response = req.json()\n\n    if \"error\" in response:\n        error = response[\"error\"]\n        error_description = response[\"error_description\"]\n        print(f\"{error}: {error_description}\")\n        sys.exit(1)\n\n    verification_uri_complete = response[\"verification_uri_complete\"]\n    interval = response[\"interval\"]\n\n    print(f\"\\nVerification URI: {verification_uri_complete}\")\n\n    data = {\n        \"client_id\": CLIENT_ID,\n        \"grant_type\": \"urn:ietf:params:oauth:grant-type:device_code\",\n        \"device_code\": response[\"device_code\"],\n    }\n\n    while True:\n        req = requests.post(TOKEN_URL, data=data, verify=SSL_VERIFY, timeout=10)\n        response = req.json()\n        if \"access_token\" in response:\n            print(\"\\nAuthentication successful\")\n            break\n        time.sleep(interval)\n\n    # Calculate expiration time\n    expires_at = time.time() + response[\"expires_in\"]\n    token_info = {\n        \"access_token\": response[\"access_token\"],\n        \"refresh_token\": response[\"refresh_token\"],\n        \"expires_at\": expires_at,\n    }\n    return token_info\n\n\ndef refresh_tokens(refresh_token_value):\n    data = {\n        \"client_id\": CLIENT_ID,\n        \"grant_type\": \"refresh_token\",\n        \"refresh_token\": refresh_token_value,\n    }\n\n    try:\n        req = requests.post(TOKEN_URL, data=data, verify=SSL_VERIFY, timeout=10)\n        response = req.json()\n\n        if \"access_token\" not in response:\n            print(\n                \"Token refresh failed. Error:\", response.get(\"error\", \"unknown error\")\n            )\n            return None\n\n        expires_at = time.time() + response[\"expires_in\"]\n        token_info = {\n            \"access_token\": response[\"access_token\"],\n            \"expires_at\": expires_at,\n        }\n\n        # Update refresh token if new one is provided\n        if \"refresh_token\" in response:\n            token_info[\"refresh_token\"] = response[\"refresh_token\"]\n            print(\"Access and refresh tokens updated\")\n        else:\n            print(\"Access token updated\")\n\n        return token_info\n\n    except Exception as e:\n        print(\"Token refresh failed:\", str(e))\n        return None\n\n\ndef healthcheck(access_token):\n    headers = {\n        \"Authorization\": f\"Bearer {access_token}\",\n        \"Content-type\": \"application/json\",\n        \"Accept\": \"text/plain\",\n    }\n\n    try:\n        response = requests.get(\n            HEALTHCHECK_URL, headers=headers, verify=SSL_VERIFY, timeout=10\n        )\n        if response.status_code == 200:\n            print(\"Healthcheck successful\")\n            return True\n        print(f\"Healthcheck failed: HTTP {response.status_code}\")\n        return False\n    except Exception as e:\n        print(\"Healthcheck error:\", str(e))\n        return False\n\n\ndef save_token_info(token_info):\n    with Path.open(TOKEN_FILE, \"w\") as f:\n        json.dump(token_info, f, indent=4)\n\n\ndef load_token_info():\n    try:\n        with Path.open(TOKEN_FILE, \"r\") as f:\n            return json.load(f)\n    except (FileNotFoundError, json.JSONDecodeError):\n        return None\n\n\ndef main():\n    token_info = load_token_info()\n\n    # If no tokens exist or file is corrupted\n    if (\n        not token_info\n        or \"access_token\" not in token_info\n        or \"refresh_token\" not in token_info\n    ):\n        print(\"No valid tokens found. Starting authentication...\")\n        token_info = authenticate()\n        save_token_info(token_info)\n        healthcheck(token_info[\"access_token\"])\n        return\n\n    # Check access token expiration with 10-second buffer\n    current_time = time.time()\n    if current_time &lt; token_info[\"expires_at\"] - 10:\n        print(\"Access token is valid\")\n        healthcheck(token_info[\"access_token\"])\n        return\n\n    print(\"Access token expired. Refreshing tokens...\")\n    new_token_info = refresh_tokens(token_info[\"refresh_token\"])\n\n    if new_token_info:\n        # Preserve existing refresh token if not updated\n        if \"refresh_token\" not in new_token_info:\n            new_token_info[\"refresh_token\"] = token_info[\"refresh_token\"]\n\n        save_token_info(new_token_info)\n        healthcheck(new_token_info[\"access_token\"])\n    else:\n        print(\"Refresh token invalid. Starting re-authentication...\")\n        token_info = authenticate()\n        save_token_info(token_info)\n        healthcheck(token_info[\"access_token\"])\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"examples/stand_cloud_thirdparty_auth/#1-script-breakdown","title":"1. Script breakdown","text":"<p>This script extends the previous basic authentication by adding functions for token management.</p>"},{"location":"examples/stand_cloud_thirdparty_auth/#11-configuration-and-endpoints","title":"1.1. Configuration and endpoints","text":"<p>Most configurations are similar to the previous script:</p> <ul> <li><code>BASE_URL</code>: StandCloud instance URL.</li> <li><code>SSL_VERIFY</code>: For SSL certificate validation.</li> <li><code>CLIENT_ID</code>: Fixed as <code>\"hardpy-report-uploader\"</code>.</li> <li><code>API_URL</code>: Base URL for API calls.</li> <li><code>DEVICE_AUTHORIZATION_URL</code>: Endpoint for initiating device flow.</li> <li><code>TOKEN_URL</code>: Endpoint for token requests (both initial and refresh).</li> <li><code>HEALTHCHECK_URL</code>: A specific endpoint used to test API access.</li> <li><code>TOKEN_FILE</code>: A <code>Path</code> object pointing to <code>token_info.json</code> in the same     directory as the script. This file is used to store token information for persistence.     (Remember the security warning regarding file storage).</li> </ul>"},{"location":"examples/stand_cloud_thirdparty_auth/#12-authenticate-function","title":"1.2. <code>authenticate()</code> function","text":"<p>This function encapsulates the initial OAuth 2.0 Device Authorization Grant Flow, identical to the previous script's main logic.</p> <ol> <li>It initiates a <code>POST</code> request to <code>DEVICE_AUTHORIZATION_URL</code> with <code>client_id</code>,     <code>scope</code> (<code>offline_access</code> is crucial here for getting a refresh token), and <code>audience</code>.</li> <li>It handles the user interaction step, printing the <code>verification_uri_complete</code>.</li> <li>It polls the <code>TOKEN_URL</code> using the <code>device_code</code> until an <code>access_token</code>     (and importantly, a <code>refresh_token</code>) is received.</li> <li>It calculates the <code>expires_at</code> timestamp based on <code>expires_in</code> and the current time,     then returns a dictionary (<code>token_info</code>) containing <code>access_token</code>, <code>refresh_token</code>, and <code>expires_at</code>.</li> </ol>"},{"location":"examples/stand_cloud_thirdparty_auth/#13-refresh_tokens-function","title":"1.3. <code>refresh_tokens()</code> function","text":"<p>This new function handles the refresh token grant type.</p> <ol> <li>It constructs a <code>POST</code> request to the <code>TOKEN_URL</code> with:<ul> <li><code>client_id</code>: Your client identifier.</li> <li><code>grant_type</code>: Set to <code>\"refresh_token\"</code>.</li> <li><code>refresh_token</code>: The <code>refresh_token_value</code> obtained from a previous authentication or refresh.</li> </ul> </li> <li>Upon a successful response, it extracts the <code>access_token</code> and its new <code>expires_at</code> timestamp.</li> <li>Crucially, it checks if a new <code>refresh_token</code> is provided in the response.     If so, it updates the stored refresh token. Some authorization servers issue new     refresh tokens with each refresh; others do not.     Best practice is to use the newest one if provided.</li> <li>It returns the <code>token_info</code> dictionary.     If the refresh fails, it prints an error and returns <code>None</code>.</li> </ol>"},{"location":"examples/stand_cloud_thirdparty_auth/#14-healthcheck-function","title":"1.4. <code>healthcheck()</code> function","text":"<p>This helper function tests the validity of an <code>access_token</code> by making a <code>GET</code> request to the <code>HEALTHCHECK_URL</code>.</p> <ol> <li>It sets the <code>Authorization</code> header with the <code>Bearer</code> token.</li> <li>It returns <code>True</code> if the response status is <code>200 OK</code>,     indicating successful API access, and <code>False</code> otherwise.</li> </ol>"},{"location":"examples/stand_cloud_thirdparty_auth/#15-save_token_info-and-load_token_info-functions","title":"1.5. <code>save_token_info()</code> and <code>load_token_info()</code> functions","text":"<p>These functions handle the persistence of token information to and from a local JSON file (<code>token_info.json</code>).</p> <ul> <li><code>save_token_info</code>: Writes the <code>token_info</code> dictionary to the <code>TOKEN_FILE</code>.</li> <li><code>load_token_info</code>: Reads the <code>token_info</code> from the <code>TOKEN_FILE</code>.     It includes error handling for <code>FileNotFoundError</code> or <code>json.JSONDecodeError</code>     if the file doesn't exist or is corrupted, returning <code>None</code> in such cases.</li> </ul>"},{"location":"examples/stand_cloud_thirdparty_auth/#16-main","title":"1.6. <code>main()</code>","text":"<p>This function orchestrates the script's logic.</p> <ol> <li>Load Existing Tokens: It first attempts to <code>load_token_info()</code> from the file.</li> <li>Initial Authentication: If no valid tokens are found (file doesn't exist,     is corrupted, or essential keys are missing), it calls <code>authenticate()</code>     to start a new device flow, then <code>save_token_info()</code> and performs a <code>healthcheck</code>.</li> <li>Check Token Expiration: If tokens are loaded, it checks if the <code>access_token</code>     is still valid (with a 10-second buffer before actual expiration).<ul> <li>If valid, it performs a <code>healthcheck</code> directly.</li> </ul> </li> <li>Token Refresh: If the <code>access_token</code> has expired or is about to expire,     it calls <code>refresh_tokens()</code> using the stored <code>refresh_token</code>.<ul> <li>If the refresh is successful, it updates the <code>token_info</code>    (preserving the refresh token if a new one wasn't issued), <code>save_token_info()</code>, and performs a <code>healthcheck</code>.</li> <li>If the refresh fails (e.g., refresh token is revoked or expired),    it falls back to starting a new full <code>authenticate()</code> flow.</li> </ul> </li> </ol>"},{"location":"examples/stand_cloud_thirdparty_auth/#2-replicating-in-other-languages","title":"2. Replicating in other languages","text":"<p>To implement this robust authentication and token refresh logic in another programming language, you'll need to:</p> <ol> <li>HTTP Client: Utilize your language's HTTP client for making <code>POST</code> and <code>GET</code> requests.</li> <li>JSON Handling: Parse JSON responses for token information and API results.</li> <li>Time Management: Accurately calculate token expiration times using timestamps.</li> <li>Token Storage: Implement a secure method to store <code>access_token</code> and especially     <code>refresh_token</code> between application runs. Avoid plain text files in production. Consider:<ul> <li>Environment variables (for secrets, typically during deployment).</li> <li>Operating system's credential manager (e.g., macOS Keychain, Windows Credential Manager).</li> <li>Encrypted database or file storage.</li> <li>Secure vaults (e.g., HashiCorp Vault, AWS Secrets Manager).</li> </ul> </li> <li>Flow Logic:<ul> <li>Initial Authentication: Implement the Device Flow as described in the previous documentation.</li> <li>Token Expiration Check: Before making an API call, always check if the access token is near expiration.</li> <li>Token Refresh Logic: If expired, make a <code>POST</code> request to the <code>TOKEN_URL</code> with <code>grant_type=refresh_token</code> and the <code>refresh_token</code>.</li> <li>Fallback to Re-authentication: If the refresh token fails, initiate the full Device Flow again.</li> </ul> </li> <li>Error Handling: Implement robust error handling for network issues,     invalid responses, and authentication failures at each step.</li> </ol>"},{"location":"features/features/","title":"Features","text":""},{"location":"features/features/#viewing-tests-in-the-operator-panel","title":"Viewing tests in the operator panel","text":"<p>The operator panel allows you to view the test hierarchy with test folder/test file/function levels. See the HardPy panel for more information. User can launch operator panel using hardpy run command.</p>"},{"location":"features/features/#running-tests","title":"Running tests","text":"<p>Based on pytest HardPy allows you to run pytest tests in the browser or command line. For running tests in browser run tests using hardpy run command.</p> <pre><code>hardpy run\n</code></pre> <p>and press the Start button. Alternatively, the user can start the operator panel with the \u201cStart\u201d button and run tests with pytest.</p> <pre><code>python -m pytest\n</code></pre> <p>The user can also run tests without the operator panel, just using the <code>hardpy start</code> command or using <code>pytest</code>.</p>"},{"location":"features/features/#stopping-the-tests","title":"Stopping the tests","text":"<p>The user can stop the tests during execution from the operator panel by clicking on the Stop button or using the <code>hardpy stop</code> command. It is possible to stop tests from the console by sending an interrupt, e.g. \u201cCtrl-C\u201d in Linux.</p>"},{"location":"features/features/#checking-the-status-of-tests","title":"Checking the status of tests","text":"<p>The user can check the status of tests using the <code>hardpy status</code> command.</p>"},{"location":"features/features/#storing-test-result-in-database","title":"Storing test result in database","text":"<p>HardPy does not allow you to run tests without a running CouchDB database. This is a NoSQL database that ensures that the results of the current test run are committed, even if the tests are aborted early.</p> <p>To save the report history, the user must configure the conftest.py file using the CouchdbLoader or another adapter to save the data. By default, only the current report in the runstore database is stored in CouchDB.</p> <p>The test report format (database scheme) is described in the database runstore section.</p> <p>An example of configuring conftest.py to store test run history can be found in several examples, including the couchdb_load and minute_parity.</p>"},{"location":"features/features/#creating-template-project","title":"Creating template project","text":"<p>The HardPy can create template project using the hardpy init command. An example of usage can be found in the how to init section among the examples, e.g. in minute parity.</p> <pre><code>hardpy init minute_parity\n</code></pre>"},{"location":"features/features/#interacting-with-tests-in-the-operator-panel","title":"Interacting with tests in the operator panel","text":"<p>The user can interact with the tests through dialog boxes in the operator panel. HardPy provides the ability to enter text or numbers, make selections using checkboxes or radio buttons, guide the user through multiple steps in a single window, display images to the user, and insert HTML components into the dialog box using iframes.</p> <p>In dialog boxes, the user must confirm their action by clicking the Confirm button. Closing the dialog box prematurely will abort the test.</p> <p>If the user only needs to provide information, an operator message can be used. Unlike dialog boxes, the user cannot enter any information, only close the window. User can also close the operator message from within the test code and run it in non-blocking mode, so that displaying the window does not stop the test.</p>"},{"location":"features/features/#running-multiple-test-attempts","title":"Running multiple test attempts","text":"<p>The HardPy allows the user to attach an attempt marker to a test, which allows the test to be repeated as many times as specified in the marker's content in the event of failure.</p>"},{"location":"features/features/#skipping-the-tests","title":"Skipping the tests","text":"<p>The HardPy allows the user to skip tests on dependency markers. The user can specify that a test or an entire module depends on another test. In this way, tests can be defined whose failure will prevent the marked tests from running. The user can also create a dependency on several test cases or modules. If the name of the dependency does not exist, the test will be started.</p> <pre><code>#test_1.py\nimport pytest\n\ndef test_a():\n    assert False\n\n@pytest.mark.dependency(\"test_1::test_a\")\ndef test_b():\n    assert True\n</code></pre> <pre><code>#test_2.py\nimport pytest\n\npytestmark = pytest.mark.dependency(\"test_1\")\n\ndef test_a():\n    assert False\n\ndef test_b():\n    assert True\n\n@pytest.mark.dependency(\"test_2::test_a\")\n@pytest.mark.dependency(\"test_2::test_b\")\ndef test_c():\n    assert True\n</code></pre> <p>See the example skip test for more information.</p>"},{"location":"features/features/#critical-tests","title":"Critical tests","text":"<p>The HardPy allows the user to skip subsequent tests marked as critical marker, if a critical test fails or is skipped. The user can designate individual tests or entire modules as critical. If a test case is marked as critical, its failure will skip all remaining tests in the current and subsequent modules. If an entire module is marked as critical, the failure of any test within it will skip all remaining tests in that module and subsequent modules.  </p> <p>Example (test level):</p> <pre><code>@pytest.mark.critical\ndef test_a():\n    assert False\n\ndef test_b():\n    assert True\n</code></pre> <p>Example (module level):</p> <pre><code>pytestmark = pytest.mark.critical\n\ndef test_c():\n    assert True\n</code></pre> <p>See the example critical for more information.</p>"},{"location":"features/features/#running-some-instance-in-single-stand","title":"Running some instance in single stand","text":"<p>A user can run multiple HardPy instances on a single stand. The startup is described in the Multiple Stand example.</p>"},{"location":"features/features/#storing-test-result-to-standcloud","title":"Storing test result to StandCloud","text":"<p>HardPy allows user to send test results to StandCloud, a data storage and analysis platform. See the StandCloud section and the StandCloud example for more information.</p>"},{"location":"features/features/#logging-approaches-in-hardpy","title":"Logging approaches in HardPy","text":"<p>HardPy provides several methods for logging and user interaction during testing. Choose the appropriate method based on whether you need to store information in the database or just display messages to the operator.</p>"},{"location":"features/features/#database-logging-with-set_message","title":"Database logging with set_message","text":"<p>The set_message function stores the log message in the report. Messages without specified keys get auto-generated keys, while known keys update existing messages. Perfect for tracking test progress, recording measurements, system states, and verification results.</p> <pre><code>def test_temperature_sensor():\n    temp = read_temperature()\n    if temp &gt; 50:\n        set_message(f\"Warning: High temperature {temp}\u00b0C\", \"temp_warning\")\n    else:\n        set_message(f\"Normal temperature {temp}\u00b0C\")\n</code></pre>"},{"location":"features/features/#interactive-dialogs-with-run_dialog_box","title":"Interactive dialogs with run_dialog_box","text":"<p>The run_dialog_box function creates dialog boxes for operator input with various widgets (text, numeric, checkboxes). Supports titles, images, and HTML content. Can be used to notify and interact with the user, but does not save the information in the report. The user can save the information separately using the set_case_artifact, set_module_artifact or set_run_artifact functions. Essential for manual equipment verification, test configuration confirmation, and safety checks.</p> <pre><code>def test_manual_calibration():\n    dialog = DialogBox(\n        dialog_text=\"Connect calibration device and press Confirm\",\n        title_bar=\"Calibration Setup\",\n        widget=RadioButtonWidget(options=[\"Ready\", \"Skip\", \"Abort\"])\n    )\n    response = run_dialog_box(dialog)\n    assert response == \"Ready\", \"Calibration was not confirmed\"\n</code></pre>"},{"location":"features/features/#operator-messages-with-set_operator_message","title":"Operator messages with set_operator_message","text":"<p>The set_operator_message function displays non-interactive notifications without database storage. The user can save the information separately using the set_case_artifact, set_module_artifact or set_run_artifact functions. Can be used to notify and interact with the user, but does not save the information in the report. Supports titles, images, and HTML content, with optional blocking until dismissed. Ideal for equipment setup instructions, test phase transitions, and important warnings.</p> <pre><code>def test_system_startup():\n    set_operator_message(\n        msg=\"Please power on all test equipment\",\n        title=\"Initial Setup\",\n        image=ImageComponent(address=\"assets/power_on.png\"),\n        block=True\n    )\n</code></pre>"},{"location":"features/features/#choosing-the-right-method","title":"Choosing the right method","text":"Method Database Storage User Interaction Best For <code>set_message</code> Yes No Permanent logs <code>run_dialog_box</code> No Yes Test steps requiring input <code>set_operator_message</code> No No Important notifications"},{"location":"features/features/#reading-test-result-from-standcloud","title":"Reading test result from StandCloud","text":"<p>HardPy allows user to read test result from StandCloud. See the StandCloud reader for more information.</p>"},{"location":"features/features/#operator-panel-language","title":"Operator panel language","text":"<p>The user can set one of the following operator panel languages \u200b\u200bvia the hardpy.toml. Available languages are there.</p> <p>The example of file:</p> <pre><code>[frontend]\nlanguage = \"zh\"\n</code></pre>"}]}